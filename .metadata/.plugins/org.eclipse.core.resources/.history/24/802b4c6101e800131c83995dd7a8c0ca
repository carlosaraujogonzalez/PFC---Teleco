package area.guias.pfc;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.ContentBody;
import org.apache.http.entity.mime.content.FileBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.HttpContext;
import org.apache.http.util.EntityUtils;

import android.annotation.TargetApi;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Looper;
import android.provider.MediaStore;
import android.provider.MediaStore.Images;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.app.FragmentTransaction;
import android.support.v4.view.ViewPager;
import android.support.v7.app.ActionBar;
import android.support.v7.app.ActionBarActivity;
import android.util.Log;
import android.view.InflateException;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Gallery;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMap.OnMapClickListener;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.CameraPosition;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.gson.stream.JsonReader;

@TargetApi(Build.VERSION_CODES.HONEYCOMB)
public class VistaGuiaActionBarTabs extends ActionBarActivity implements ActionBar.TabListener {
		
	SectionsPagerAdapter mSectionsPagerAdapter;
	ViewPager mViewPager;
	
	private static AlmacenDispositivos almacenDisp, almacenNuevosDisp;
	private static AlmacenAplicaciones almacenApp, almacenNuevasApp;
	private static AdaptadorGaleriaDispositivos galleryAdapterDisp, galleryAdapterNewDisp;
	private static AdaptadorGaleriaAplicaciones galleryAdapterApp, galleryAdapterNewApp;
	public String Titulo, Descripcion, UrlImage;
	private int ts_id, cs_id, as_id, guideId;
	private static SharedPreferences preferences;
	private static Gallery galeriaDispositivos, galeriaAplicaciones;
	private static Gallery galeriaNuevosDispositivos, galeriaNuevasAplicaciones;	
	private static String modo_edicion;
	private IP ip = new IP();
	private static Guia guia = new Guia();
	public static GoogleMap mapa;
	public static int tab_selected;
	
	private static Uri imageUri_new, imageUri_old;
	private static final int ACTIVITY_SELECT_IMAGE = 1020, ACTIVITY_SELECT_FROM_CAMERA = 1040;
	private Uri mImageUri;
	private static BitmapFactory.Options generalOptions;
	
	 
	
	@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.vista_guia_action_bar_tabs);
        modo_edicion = "none";
        
        // Configura el ActionBar
        final ActionBar actionBar = getSupportActionBar();
        actionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);       
        getOverflowMenu();
        
        // Crea el adaptador que devolverá un fragmento para cada una de las 3 secciones
        // de la Activity.
        mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());

        // Configura el ViewPager con el adaptador de secciones.
        mViewPager = (ViewPager) findViewById(R.id.pager);
        mViewPager.setAdapter(mSectionsPagerAdapter);       
        // Cuando te mueves entre secciones, selecciona el correspondiente tab. 
        // Podemos usar ActionBar.Tab#select() para hacer esto si tenemos una referencia
        // al Tab
        mViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
            @Override
            public void onPageSelected(int position) {
                actionBar.setSelectedNavigationItem(position);
                
            }
        });
        // Indicamos cuantas páginas queremos que estén precargadas en memoria, en nuestro caso 4
        // 3 precargadas más 1 que se está mostrando
        mViewPager.setOffscreenPageLimit(3);
        // Para cada una de las secciones, añade un tab a la action bar.
        for (int i = 0; i < mSectionsPagerAdapter.getCount(); i++) {
        	// Crea un tab con el texto correspondiente al titulo de la pagina definido por el adaptador.
        	// También especifica este Activity object, el que implementa el TabListener interface, 
        	// como la llamada (listener) cuando este tab está seleccionado.
            actionBar.addTab(actionBar.newTab().setText(mSectionsPagerAdapter.getPageTitle(i)).setTabListener(this));
        }
                       
        preferences = getSharedPreferences("datos",MODE_PRIVATE);
        
        almacenDisp = new DispositivosArray();
  	    almacenApp = new AplicacionesArray();
  	    almacenNuevosDisp = new DispositivosArray();
  	    almacenNuevasApp = new AplicacionesArray();
  	    
        galleryAdapterDisp = new AdaptadorGaleriaDispositivos(this, almacenDisp.listaDispositivos());
		galleryAdapterNewDisp = new AdaptadorGaleriaDispositivos(this, almacenNuevosDisp.listaDispositivos());
		galleryAdapterApp = new AdaptadorGaleriaAplicaciones(this, almacenApp.listaAplicaciones());
		galleryAdapterNewApp = new AdaptadorGaleriaAplicaciones(this, almacenNuevasApp.listaAplicaciones());        
		
        Bundle extras = getIntent().getExtras();
        guideId = extras.getInt("id");
        Titulo = extras.getString("titulo");
        UrlImage = extras.getString("URLimage");
        Descripcion = extras.getString("description");
        ts_id = extras.getInt("ts_id"); // technological_setting_id
        cs_id = extras.getInt("cs_id"); // contextual_setting_id
        as_id = extras.getInt("as_id"); // activity_sequence_id
        
        System.out.println("titulo: " + Titulo);
        System.out.println("imagen: " + UrlImage);
        System.out.println("descripcion: " + Descripcion);
                
        imageUri_new = null;
        imageUri_old = null;
          
    	// TAB1
        if (UrlImage.equals("none")) new ObtenerImagenTab1(guideId, "none", this).start();
        else new ObtenerImagenTab1(guideId, ip.ip + UrlImage, this).start();
        // TAB2
        new ObtenerTab2(ts_id).start();
        // TAB3
        //new ObtenerTab3(cs_id).start();
        // TAB4
        //new ObtenerTab4().start();
             
    }
       
	
	
	
	
	@Override
	protected void onSaveInstanceState(Bundle outState) {
	    super.onSaveInstanceState(outState);
	    if (mImageUri != null)
	        outState.putString("Uri", mImageUri.toString());
	}
	 
	
	
	
	
	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState) {
	    super.onRestoreInstanceState(savedInstanceState);
	    if (savedInstanceState.containsKey("Uri")) {
	        mImageUri = Uri.parse(savedInstanceState.getString("Uri"));
	    }
	}
	
	
	
	
	
	@Override   
    public void onStart(){
    	super.onStart();
    	Toast.makeText(this, "onStart", Toast.LENGTH_SHORT).show();    	    	       	
    }
     
    
    
    
    
    @Override     
    public void onResume(){
    	super.onResume();     
    	Toast.makeText(this, "onResume", Toast.LENGTH_SHORT).show();
    }
	
    
    
    
	
	@Override
    public boolean onCreateOptionsMenu(Menu menu) {       
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_vistaguia, menu);
        return true;
    }
	
	
	
	
	
	@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();
        if (id == R.id.menu_vg_revert){
        	finish();
        	return true;
        }
        if (id == R.id.menu_vg_save) {
        	Guardar();
            return true;
        }
        if (id == R.id.menu_vg_comment) {
            return true;
        }
        if (id == R.id.menu_vg_copy) {
            return true;
        }
        if (id == R.id.menu_vg_edit) {        
        	// ACTIVAMOS MODO EDICION
        	modo_edicion = "true";
        	
        	new EditarGuia(guideId, "HiloEditar").start();
            return true;
        }
        if (id == R.id.menu_vg_delete) {
        	new EditarGuia(guideId, "Eliminar").start(); 
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
    
    
    
    
    
	@Override
	public void onTabReselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
		
	}

	
	
	
	
	@Override
	public void onTabSelected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
		// When the given tab is selected, switch to the corresponding page in
        // the ViewPager.
		System.out.println("mViewPager.setCurrentItem("+tab.getPosition()+");");
		tab_selected = tab.getPosition();
        mViewPager.setCurrentItem(tab.getPosition());
	}

	
	
	
	
	@Override
	public void onTabUnselected(ActionBar.Tab tab, FragmentTransaction fragmentTransaction) {
	}

	
	
	
	
	private void getOverflowMenu() {
        try {
           ViewConfiguration config = ViewConfiguration.get(this);
           Field menuKeyField = ViewConfiguration.class.getDeclaredField("sHasPermanentMenuKey");
           if(menuKeyField != null) {
               menuKeyField.setAccessible(true);
               menuKeyField.setBoolean(config, false);
           }
       } catch (Exception e) {
           e.printStackTrace();
       }
     }    

	
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
////////////////////	         FUNCIONES DE EDICIÓN DE LA GUÍA              ////////////////////
////////////////////														  ////////////////////
////////////////////														  ////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////	
	
	
	public void Atras(View view){
    	finish();
    }
    
    
    
    
    
    public void Comentar(View view){
    	
    }
    
    
    
    
    
    public void Copiar(View view){
    	
    }
    
    
    
    
    
    public void Eliminar(View view){
    	new EditarGuia(guideId, "Eliminar").start();   	
    }
    
    
    
    
    
    public void HiloEditar(View view){
    	// ACTIVAMOS MODO EDICION
    	modo_edicion = "true";
    	
    	// MIRAMOS SI EL ID DE LA GUIA ES NUESTRO PARA PODER EDITAR
    	new EditarGuia(guideId, "HiloEditar").start();
    }
    
    
    
    
    
    class EditarGuia extends Thread {
    	int idGuia;
        String funcionLLamante;
        
        public EditarGuia(int idGuia, String funcionLLamante) {
        	this.idGuia = idGuia;
        	this.funcionLLamante = funcionLLamante;
        }

        @Override 
        public void run() {
        	try{
        		HttpClient cliente = new DefaultHttpClient();	        	
        		String BaseUrlPage = ip.ip+"/gl/guides/search.json?owner=true&page=";
        		int numPage = 1;
        		String UrlPage = BaseUrlPage+numPage;
        		HttpGet solicitud = new HttpGet(UrlPage);
        		solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
        		List<Guia> IdList = null;
        		String UrlId = null;
        		do{	        		
        			HttpResponse respuesta = cliente.execute(solicitud);
        			HttpEntity entity = respuesta.getEntity();
        			if (entity == null) break;
        			IdList = readJsonStream(entity);
        			for (int i=0; i<IdList.size(); i++)
        				if (i==IdList.size()-1) UrlId = UrlId+IdList.get(i).id;
        				else UrlId = UrlId+IdList.get(i).id+",";	
        			numPage++;
        			UrlPage = BaseUrlPage+numPage;
        			solicitud = new HttpGet(UrlPage);
        			if (IdList.size()%15==0) UrlId = UrlId+",";
        		}while(IdList.size()==15);
        		// LISTA DE IDs
        		System.out.println(UrlId);
        		boolean owner = false;
        		for (int i=0;i<IdList.size();i++){
        			if (IdList.get(i).id == this.idGuia){
        				owner = true;
        				break;
        			}    			
        		}
        		if (funcionLLamante.equals("HiloEditar")) Editar(owner);       
        		else EliminarGuia(owner);
        	} catch (ClientProtocolException e) {
        		// TODO Auto-generated catch block
        		e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}   	     
        }
	} 
    
    public void Editar(final boolean owner){
    	if (owner == true){
    	runOnUiThread(new Runnable() {
	        public void run() {
	        	
	        	// BOTONES COMENTAR COPIAR Y ELIMINAR
	        	Button comentar = (Button) findViewById(R.id.comentar);
	        	comentar.setVisibility(View.INVISIBLE);
	        	Button copiar = (Button) findViewById(R.id.copiar);
	        	copiar.setVisibility(View.INVISIBLE);
	        	Button eliminar = (Button) findViewById(R.id.eliminar);
	        	eliminar.setVisibility(View.INVISIBLE);
        
	        	// BOTONES OK Y CANCELAR        	
	        	Button button = (Button) findViewById(R.id.ok); 
	        	button.setVisibility(View.VISIBLE);
	        	button = (Button) findViewById(R.id.cancelar); 
	        	button.setVisibility(View.VISIBLE);
	        	
	        		// TAB 1
	        		// TITULO
	        		TextView titulo = (TextView) findViewById(R.id.titulo_tab1);
	        		titulo.setVisibility(View.INVISIBLE);
	        		String tituloActual = titulo.getText().toString();
	        		EditText editTitle = (EditText) findViewById(R.id.editar_titulo_tab1);
	        		editTitle.setText(tituloActual);
	        		editTitle.setVisibility(View.VISIBLE);
        
	        		// DESCRIPCION
	        		TextView descripcion = (TextView) findViewById(R.id.descripcion_tab1);
	        		descripcion.setVisibility(View.INVISIBLE);
	        		String descripcionActual = descripcion.getText().toString();
	        		EditText editDesc = (EditText) findViewById(R.id.editar_descripcion_tab1); 
	        		editDesc.setText(descripcionActual);
	        		editDesc.setVisibility(View.VISIBLE);
        
	        		// TAB 2
	        		// TITULO
	        		titulo = (TextView) findViewById(R.id.titulo_tab2);
	        		titulo.setVisibility(View.INVISIBLE);
	        		tituloActual = titulo.getText().toString();
	        		editTitle = (EditText) findViewById(R.id.editar_titulo_tab2);
	        		editTitle.setText(tituloActual);
	        		editTitle.setVisibility(View.VISIBLE);
	        	
	        		// DESCRIPCION
	        		descripcion = (TextView) findViewById(R.id.descripcion_tab2);
	        		descripcion.setVisibility(View.INVISIBLE);
	        		descripcionActual = descripcion.getText().toString();
	        		editDesc = (EditText) findViewById(R.id.editar_descripcion_tab2); 
	        		editDesc.setText(descripcionActual);
	        		editDesc.setVisibility(View.VISIBLE);
	        	
	        		// IMAGEN
	        		Button buttonSelImagen = (Button) findViewById(R.id.seleccionar_imagen_tab2); 
	        		buttonSelImagen.setVisibility(View.VISIBLE);
	        	
	        		// BOTONES AÑADIR DISPOSITIVO Y AÑADIR APLICACION
	        		button = (Button) findViewById(R.id.nuevo_dispositivo_tab2);
	        		button.setVisibility(View.VISIBLE);
	        		button = (Button) findViewById(R.id.nueva_aplicacion_tab2);
	        		button.setVisibility(View.VISIBLE);

	        		// TAB 3
	        		// TITULO
	        		titulo = (TextView) findViewById(R.id.textView_titulo_tab3);
	        		titulo.setVisibility(View.INVISIBLE);
	        		tituloActual = titulo.getText().toString();
	        		editTitle = (EditText) findViewById(R.id.editText_titulo_tab3);
	        		editTitle.setText(tituloActual);
	        		editTitle.setVisibility(View.VISIBLE);
	        	
	        		// MATERIA
	        		titulo = (TextView) findViewById(R.id.textView_materia);
	        		titulo.setVisibility(View.INVISIBLE);
	        		editTitle = (EditText) findViewById(R.id.editText_materia);
	        		editTitle.setVisibility(View.VISIBLE);
	        	
	        		// KEYWORDS
	        		titulo = (TextView) findViewById(R.id.textView_keywords);
	        		titulo.setVisibility(View.INVISIBLE);
	        		tituloActual = titulo.getText().toString();
	        		editTitle = (EditText) findViewById(R.id.editText_keywords);
	        		editTitle.setText(tituloActual);
	        		editTitle.setVisibility(View.VISIBLE);
	        	
	        		// RANGO EDADES
	        		titulo = (TextView) findViewById(R.id.textView_rangoEdades);
	        		titulo.setVisibility(View.INVISIBLE);
	        		tituloActual = titulo.getText().toString();
	        		editTitle = (EditText) findViewById(R.id.editText_rangoEdades);
	        		editTitle.setText(tituloActual);
	        		editTitle.setVisibility(View.VISIBLE);
	        	
	        		// NIVEL EDUCATIVO
	        		titulo = (TextView) findViewById(R.id.textView_nivelEducativo);
	        		titulo.setVisibility(View.INVISIBLE);
	        		editTitle = (EditText) findViewById(R.id.editText_nivelEducativo);
	        		editTitle.setVisibility(View.VISIBLE);
	        	
	        		// LENGUAJE
	        		titulo = (TextView) findViewById(R.id.textView_lenguaje);
	        		titulo.setVisibility(View.INVISIBLE);
	        		editTitle = (EditText) findViewById(R.id.editText_lenguaje);
	        		editTitle.setVisibility(View.VISIBLE);
	        	
	        		// FECHA INICIO
	        		titulo = (TextView) findViewById(R.id.textView_fechaInicio);
	        		titulo.setVisibility(View.INVISIBLE);
	        		tituloActual = titulo.getText().toString();
	        		editTitle = (EditText) findViewById(R.id.editText_fechaInicio);
	        		editTitle.setText(tituloActual);
	        		editTitle.setVisibility(View.VISIBLE);
	        	
	        		// FECHA FIN
	        		titulo = (TextView) findViewById(R.id.textView_fechaFin);
	        		titulo.setVisibility(View.INVISIBLE);
	        		tituloActual = titulo.getText().toString();
	        		editTitle = (EditText) findViewById(R.id.editText_fechaFin);
	        		editTitle.setText(tituloActual);
	        		editTitle.setVisibility(View.VISIBLE);	
	        	
	        }
    		});
    	}
    	else{   		
    		Looper.prepare();
    		AlertDialog.Builder dialog = new AlertDialog.Builder(this);    		
    		dialog.setTitle("Advertencia");
    		dialog.setMessage("No puedes editar esta guía. No eres el autor.");
    		dialog.setCancelable(false);
    		dialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {   		 
    		   @Override
    		   public void onClick(DialogInterface dialog, int which) {
    		      dialog.cancel();
    		   }
    		});  		
    		dialog.show();
    		Looper.loop();
    	}
    }
    
    
    
    
       
    public void EliminarGuia(boolean owner){
    	if (owner == true){
    		Looper.prepare();
    		AlertDialog.Builder dialog = new AlertDialog.Builder(this);    		
    		dialog.setTitle("Advertencia");
    		dialog.setMessage("¿Seguro que quieres eliminar?");
    		dialog.setCancelable(false);
    		dialog.setPositiveButton("Si", new DialogInterface.OnClickListener() {   		 
    		   @Override
    		   public void onClick(DialogInterface dialog, int which) {
    		      dialog.cancel();
    		      runOnUiThread(new Runnable() {
    	    	        public void run() {
    	    	        	new HiloEliminarGuia(guideId).start();
    	    	        }
    	    		});
    		   }
    		});  		
    		dialog.setNegativeButton("No", new DialogInterface.OnClickListener() {   		 
    			   @Override
    			   public void onClick(DialogInterface dialog, int which) {
    			      dialog.cancel();
    			   }
    			});  		
    		dialog.show();
    		Looper.loop();
    		
    	}
    	else{
    		Looper.prepare();
    		AlertDialog.Builder dialog = new AlertDialog.Builder(this);    		
    		dialog.setTitle("Advertencia");
    		dialog.setMessage("No puedes eliminar esta guía. No eres el autor.");
    		dialog.setCancelable(false);
    		dialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {   		 
    		   @Override
    		   public void onClick(DialogInterface dialog, int which) {
    		      dialog.cancel();
    		   }
    		});  		
    		dialog.show();
    		Looper.loop();
    	}
    }
    
    
    
    
    
    public void Aceptar(View view){
    	// OCULTAR TECLADO
    	EditText editDescription = (EditText) findViewById(R.id.editar_descripcion_tab2);   
    	InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(editDescription.getWindowToken(), 0);
    }
    
    
    
    
    
    public void Guardar(){
    	// TAB 1
    	// COMPROBAR TITULO
    	EditText editTitle = (EditText) findViewById(R.id.editar_titulo_tab1);    	
    	TextView titulo_tab1 = (TextView) findViewById(R.id.titulo_tab1);
    	String tituloNuevo = editTitle.getText().toString();
    	String titulo = titulo_tab1.getText().toString();
    	if (tituloNuevo.equals(titulo)){}// No se editó
    	else{
    		new EnviarCabecera(tituloNuevo, "", null, guideId).start(); // Se editó
    		titulo_tab1.setText(tituloNuevo);
    		guia.name = tituloNuevo;
    	}
    	editTitle.setVisibility(View.INVISIBLE);
    	titulo_tab1.setVisibility(View.VISIBLE);
    	
    	// COMPROBAR DESCRIPCIÓN
    	EditText editDescription = (EditText) findViewById(R.id.editar_descripcion_tab1);    	
    	TextView descripcion_tab1 = (TextView) findViewById(R.id.descripcion_tab1);
    	String descripcionNueva = editDescription.getText().toString();
    	String descripcion = descripcion_tab1.getText().toString();
    	if (descripcionNueva.equals(descripcion)){}// No se editó
    	else{
    		new EnviarCabecera("", descripcionNueva, null, guideId).start(); // Se editó
    		descripcion_tab1.setText(descripcionNueva);
    		guia.description = descripcionNueva;
    	}
    	editDescription.setVisibility(View.INVISIBLE);
    	descripcion_tab1.setVisibility(View.VISIBLE);
    	
    	// COMPROBAR IMAGEN
    	if ((imageUri_new != null)&(imageUri_new != imageUri_old)) new EnviarCabecera("", "", imageUri_new, guideId).start();
    	
    	
    	// TAB 2
    	// COMPROBAR TITULO
    	editTitle = (EditText) findViewById(R.id.editar_titulo_tab2);    	
    	TextView titulo_tab2 = (TextView) findViewById(R.id.titulo_tab2);
    	tituloNuevo = editTitle.getText().toString();
    	titulo = titulo_tab2.getText().toString();
    	if (tituloNuevo.equals(titulo)){}// No se editó
    	else{
    		new EnviarContextoTecnico(tituloNuevo, "", null, ts_id, -1, -1, -1, -1).start(); // Se editó
    		titulo_tab2.setText(tituloNuevo);
    	}
    	editTitle.setVisibility(View.INVISIBLE);
    	titulo_tab2.setVisibility(View.VISIBLE);
    	
    	// COMPROBAR DESCRIPCIÓN
    	editDescription = (EditText) findViewById(R.id.editar_descripcion_tab2);    	
    	TextView descripcion_tab2 = (TextView) findViewById(R.id.descripcion_tab2);
    	descripcionNueva = editDescription.getText().toString();
    	descripcion = descripcion_tab2.getText().toString();
    	if (descripcionNueva.equals(descripcion)){}// No se editó
    	else{
    		new EnviarContextoTecnico("", descripcionNueva, null, ts_id, -1, -1, -1, -1).start(); // Se editó
    		descripcion_tab2.setText(descripcionNueva);
    	}
    	editDescription.setVisibility(View.INVISIBLE);
    	descripcion_tab2.setVisibility(View.VISIBLE);
    	
    	// OCULTAR TECLADO
    	InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(editDescription.getWindowToken(), 0);

    	// TAB 3
    	// COMPROBAR TITULO
    	editTitle = (EditText) findViewById(R.id.editText_titulo_tab3);
    	TextView titulo_tab3 = (TextView) findViewById(R.id.textView_titulo_tab3);
    	tituloNuevo = editTitle.getText().toString();
    	titulo = titulo_tab3.getText().toString();
    	if (tituloNuevo.equals(titulo)){}
    	else{
    		new EnviarContextoEducativo(cs_id, tituloNuevo, "", "", "", "", "").start();
    		titulo_tab3.setText(tituloNuevo);
    	}
    	editTitle.setVisibility(View.INVISIBLE);
    	titulo_tab3.setVisibility(View.VISIBLE);
    	
    	// COMPROBAR DESCRIPCIÓN
    	
    	// COMPROBAR AGE RANGE
    	TextView rangoEdades = (TextView) findViewById(R.id.textView_rangoEdades);
    	EditText eT_rangoEdades = (EditText) findViewById(R.id.editText_rangoEdades);
    	if (rangoEdades.getText().toString().equals(eT_rangoEdades.getText().toString())){}
    	else{
    		new EnviarContextoEducativo(cs_id, "",eT_rangoEdades.getText().toString(), "", "", "", "").start();
    		rangoEdades.setText(eT_rangoEdades.getText().toString());
    	}
    	eT_rangoEdades.setVisibility(View.INVISIBLE);
    	rangoEdades.setVisibility(View.VISIBLE);
    	
    	// COMPROBAR KEYWORDS
    	TextView keywords = (TextView) findViewById(R.id.textView_keywords);
    	EditText eT_keywords = (EditText) findViewById(R.id.editText_keywords);
    	if (keywords.getText().toString().equals(eT_keywords.getText().toString())){}
    	else{
    		new EnviarContextoEducativo(cs_id, "", "", eT_keywords.getText().toString(), "", "", "").start();
    		keywords.setText(eT_keywords.getText().toString());
    	}
    	eT_keywords.setVisibility(View.INVISIBLE);
    	keywords.setVisibility(View.VISIBLE);
    	
    	// COMPROBAR START DATE
    	TextView fechaInicio = (TextView) findViewById(R.id.textView_fechaInicio);
    	EditText eT_fechaInicio = (EditText) findViewById(R.id.editText_fechaInicio);
    	if (fechaInicio.getText().toString().equals(eT_fechaInicio.getText().toString())){}
    	else{
    		new EnviarContextoEducativo(cs_id, "","", "", eT_fechaInicio.getText().toString(), "", "").start();
    		fechaInicio.setText(eT_fechaInicio.getText().toString());
    	}
    	eT_fechaInicio.setVisibility(View.INVISIBLE);
    	fechaInicio.setVisibility(View.VISIBLE);
    	
    	// COMPROBAR END DATE
    	TextView fechaFin = (TextView) findViewById(R.id.textView_fechaFin);
    	EditText eT_fechaFin = (EditText) findViewById(R.id.editText_fechaFin);
    	if (fechaFin.getText().toString().equals(eT_fechaFin.getText().toString())){}
    	else{
    		new EnviarContextoEducativo(cs_id, "","", "", "", eT_fechaFin.getText().toString(), "").start();
    		fechaFin.setText(eT_fechaFin.getText().toString());
    	}
    	eT_fechaFin.setVisibility(View.INVISIBLE);
    	fechaFin.setVisibility(View.VISIBLE);
    	
    	// COMPROBAR MAPA
    	CameraPosition camPos = mapa.getCameraPosition();
    	double latitude = camPos.target.latitude;
    	double longitude = camPos.target.longitude;
    	String coordinates = "" + latitude + "," + longitude;
    	new EnviarContextoEducativo(cs_id, "","", "", "", "", coordinates).start();
    	
    	/*CameraUpdate ZoomCam = CameraUpdateFactory.zoomTo(10);
        mapa.animateCamera(ZoomCam);*/
    	
    	
    }
    
    
    
    
    public class EnviarContextoEducativo extends Thread {
    	String titulo, descripcion, age_range, keywords, start_date, end_date, coordinates;
    	int CEid;
        Uri imageUri;
        
        
        public EnviarContextoEducativo(int CEid, String titulo, String age_range, String keywords, String start_date, String end_date, String coordinates) {
        	this.descripcion = descripcion;
        	this.titulo = titulo;
        	this.CEid = CEid;
        	this.imageUri = imageUri;    
        	this.age_range = age_range;
        	this.keywords = keywords;
        	this.start_date = start_date;
        	this.end_date = end_date;
        	this.coordinates = coordinates;
        }

        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpPut solicitud;
        	String BaseUrlPage;
        	BaseUrlPage = ip.ip+"/gl/educationalSettings/"+this.CEid+".json";
        	
            MultipartEntity mpEntity = new MultipartEntity();
			try {
				if (this.titulo.equals("")){}
				else{
					ContentBody titleBody = new StringBody(this.titulo);				
					mpEntity.addPart("title", titleBody);
				}
				
				if (this.age_range.equals("")){}
				else{
					ContentBody ageRangeBody = new StringBody(this.age_range);
					mpEntity.addPart("age_range", ageRangeBody);
				}
				if (this.keywords.equals("")){}
				else{
					ContentBody keywordsBody = new StringBody(this.keywords);
					mpEntity.addPart("keywords", keywordsBody);
				} 
				if (this.start_date.equals("")){}
				else{
					ContentBody startDateBody = new StringBody(this.start_date);
					mpEntity.addPart("start_date", startDateBody);
				}
				if (this.end_date.equals("")){}
				else{
					ContentBody end_dateBody = new StringBody(this.end_date);
					mpEntity.addPart("end_date", end_dateBody);
				}
				if (this.coordinates.equals("")){}
				else{
					ContentBody coordinatesBody = new StringBody(this.coordinates);
					mpEntity.addPart("coordinates", coordinatesBody);
				}
				/*if (this.imageUri == null){}
				else{
					//System.out.println("imageUri en enviarcabecera="+this.imageUri);
					File file = new File(getRealPathFromURI(this.imageUri));
					ContentBody fotoBody = new FileBody(file, "image/jpeg");
					mpEntity.addPart("image", fotoBody);
				}*/
				
				solicitud = new HttpPut(BaseUrlPage);
				solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
				solicitud.setEntity(mpEntity);
				cliente.execute(solicitud);					

			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}				
        }        
    }
    
    
    
    
    
    class EnviarCabecera extends Thread {
    	String titulo, descripcion;
    	int id;
        Uri imageUri;
        
        public EnviarCabecera(String titulo, String descripcion, Uri imageUri, int id) {
        	this.descripcion = descripcion;
        	this.titulo = titulo;
        	this.id = id;
        	this.imageUri = imageUri;
        }

        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpPut solicitud;
        	String BaseUrlPage;
        	BaseUrlPage = ip.ip+"/gl/guides/"+this.id+".json";
        	solicitud = new HttpPut(BaseUrlPage);	
        	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
            MultipartEntity mpEntity = new MultipartEntity();
			try {
				if (this.titulo.equals("")){}
				else{
					ContentBody titleBody = new StringBody(this.titulo);				
					mpEntity.addPart("title", titleBody);
				}
				if (this.descripcion.equals("")){}
				else{
					ContentBody descBody = new StringBody(this.descripcion);
					mpEntity.addPart("description", descBody);
				}
				if (this.imageUri == null){}
				else{
					System.out.println("imageUri en enviarcabecera="+this.imageUri);
					File file = new File(getRealPathFromURI(this.imageUri));
					ContentBody fotoBody = new FileBody(file, "image/jpeg");
					mpEntity.addPart("image", fotoBody);
				}
				solicitud.setEntity(mpEntity);
            	cliente.execute(solicitud);	
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}				
        }        
    }
    
    
    
    
    
    public void Cancelar(View view){
    	modo_edicion = "false";
    	ModoNormal();
    }
    
    public void ModoNormal(){
    	// TAB1
    	// TITULO
    	EditText editTitle = (EditText) findViewById(R.id.editar_titulo_tab1); 
    	editTitle.setVisibility(View.INVISIBLE);
    	TextView titulo_tab1 = (TextView) findViewById(R.id.titulo_tab1);
    	titulo_tab1.setVisibility(View.VISIBLE);
    	
    	// DESCRIPCIÓN
    	EditText editDescription = (EditText) findViewById(R.id.editar_descripcion_tab1);    
    	editDescription.setVisibility(View.INVISIBLE);
    	TextView descripcion_tab1 = (TextView) findViewById(R.id.descripcion_tab1);
    	descripcion_tab1.setVisibility(View.VISIBLE);
    	
    	// OCULTAR TECLADO
    	InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(editDescription.getWindowToken(), 0);
		
    	// TAB 2
    	// TITULO
    	editTitle = (EditText) findViewById(R.id.editar_titulo_tab2); 
    	editTitle.setVisibility(View.INVISIBLE);
    	TextView titulo_tab2 = (TextView) findViewById(R.id.titulo_tab2);
    	titulo_tab2.setVisibility(View.VISIBLE);
    	
    	// DESCRIPCION
    	editDescription = (EditText) findViewById(R.id.editar_descripcion_tab2);    
    	editDescription.setVisibility(View.INVISIBLE);
    	TextView descripcion_tab2 = (TextView) findViewById(R.id.descripcion_tab2);
    	descripcion_tab2.setVisibility(View.VISIBLE);
    	
    	// BOTONES NUEVO DISPOSITIVO Y APLICACION
    	Button button = (Button) findViewById(R.id.nuevo_dispositivo_tab2);
    	button.setVisibility(View.GONE);
    	button = (Button) findViewById(R.id.nueva_aplicacion_tab2);
    	button.setVisibility(View.GONE);
    	
    	
    	// OCULTAR TECLADO
    	imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(editDescription.getWindowToken(), 0);
		
    	// TAB 3
    	// TITULO
    	TextView titulo = (TextView) findViewById(R.id.textView_titulo_tab3);
    	titulo.setVisibility(View.VISIBLE);
    	editTitle = (EditText) findViewById(R.id.editText_titulo_tab3);
    	editTitle.setVisibility(View.INVISIBLE);
    	
    	// MATERIA
    	titulo = (TextView) findViewById(R.id.textView_materia);
    	titulo.setVisibility(View.VISIBLE);
    	editTitle = (EditText) findViewById(R.id.editText_materia);
    	editTitle.setVisibility(View.INVISIBLE);
    	
    	// KEYWORDS
    	titulo = (TextView) findViewById(R.id.textView_keywords);
    	titulo.setVisibility(View.VISIBLE);
    	editTitle = (EditText) findViewById(R.id.editText_keywords);
    	editTitle.setVisibility(View.INVISIBLE);
    	
    	// RANGO EDADES
    	titulo = (TextView) findViewById(R.id.textView_rangoEdades);
    	titulo.setVisibility(View.VISIBLE);
    	editTitle = (EditText) findViewById(R.id.editText_rangoEdades);
    	editTitle.setVisibility(View.INVISIBLE);
    	
    	// NIVEL EDUCATIVO
    	titulo = (TextView) findViewById(R.id.textView_nivelEducativo);
    	titulo.setVisibility(View.VISIBLE);
    	editTitle = (EditText) findViewById(R.id.editText_nivelEducativo);
    	editTitle.setVisibility(View.INVISIBLE);
    	
    	// LENGUAJE
    	titulo = (TextView) findViewById(R.id.textView_lenguaje);
    	titulo.setVisibility(View.VISIBLE);
    	editTitle = (EditText) findViewById(R.id.editText_lenguaje);
    	editTitle.setVisibility(View.INVISIBLE);
    	
    	// FECHA INICIO
    	titulo = (TextView) findViewById(R.id.textView_fechaInicio);
    	titulo.setVisibility(View.VISIBLE);
    	editTitle = (EditText) findViewById(R.id.editText_fechaInicio);
    	editTitle.setVisibility(View.INVISIBLE);
    	
    	// FECHA FIN
    	titulo = (TextView) findViewById(R.id.textView_fechaFin);
    	titulo.setVisibility(View.VISIBLE);
    	editTitle = (EditText) findViewById(R.id.editText_fechaFin);
    	editTitle.setVisibility(View.INVISIBLE);
    	
    	// OCULTAR TECLADO
    	imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(editTitle.getWindowToken(), 0);    	
		
		// BOTONES OK Y CANCELAR
        button = (Button) findViewById(R.id.ok); 
        button.setVisibility(View.INVISIBLE);
        button = (Button) findViewById(R.id.cancelar); 
        button.setVisibility(View.INVISIBLE);
        
		
		// BOTONES COMENTAR COPIAR EDITAR Y ELIMINAR
        Button comentar = (Button) findViewById(R.id.comentar);
        comentar.setVisibility(View.VISIBLE);
        Button copiar = (Button) findViewById(R.id.copiar);
        copiar.setVisibility(View.VISIBLE);
        Button eliminar = (Button) findViewById(R.id.eliminar);
        eliminar.setVisibility(View.VISIBLE);
    }
    
    
    
    
    
    public static File createTemporaryFile(String part, String ext, Context myContext) throws Exception {
        File tempDir = myContext.getExternalCacheDir();
        tempDir = new File(tempDir.getAbsolutePath() + "/temp/");
        if (!tempDir.exists()) {
        	tempDir.mkdir();
        }
        return File.createTempFile(part, ext, tempDir);
    }
    
    
    
    
    
    public void getPhotoDialog(View view) {
    	if (modo_edicion.equals("true")){
    		AlertDialog.Builder dialog = new AlertDialog.Builder(this);    		
    		dialog.setTitle("Advertencia");
    		dialog.setMessage("Escoge entre cámara o galería");
    		dialog.setCancelable(false);
    		dialog.setPositiveButton("Cámara", new DialogInterface.OnClickListener() {   		 
    		   @Override
    		   public void onClick(DialogInterface dialog, int which) {
    			   Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
                   File photo = null;
                   try {
                       // place where to store camera taken picture
                       photo = createTemporaryFile("picture", ".jpg", VistaGuiaActionBarTabs.this);
                       photo.delete();
                   } catch (Exception e) {
                       Log.v(getClass().getSimpleName(), "Can't create file to take picture!");
                   }
                   mImageUri = Uri.fromFile(photo);
                   intent.putExtra(MediaStore.EXTRA_OUTPUT, mImageUri);
                   startActivityForResult(intent, ACTIVITY_SELECT_FROM_CAMERA);

               }
    		});  		
    		dialog.setNegativeButton("Galería", new DialogInterface.OnClickListener() {   		 
    			   @Override
    			   public void onClick(DialogInterface dialog, int which) {
    				   Intent galleryIntent = new Intent(Intent.ACTION_GET_CONTENT);
                       galleryIntent.setType("image/*");
                       startActivityForResult(galleryIntent, ACTIVITY_SELECT_IMAGE);
    			   }
    			});  		
    		dialog.show();
    	}
 
    }
    
    
    
    
    
    /*public void seleccionarDeGaleria(View view){
    	if (modo_edicion.equals("true")){
    		int code = SELECT_PICTURE;
    		Intent intent = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.INTERNAL_CONTENT_URI);
    		startActivityForResult(intent, code);
    	}
    }*/
   
    
    
    
    
    public static int nearest2pow(int value) {
        return value == 0 ? 0 : (32 - Integer.numberOfLeadingZeros(value - 1)) / 2;
    }
    
    
    
    
    
    public Bitmap scaleImage(BitmapFactory.Options options, Uri uri,int targetWidth) {
        if (options == null) options = generalOptions;
        Bitmap bitmap = null;
        double ratioWidth = ((float) targetWidth) / (float) options.outWidth;
        double ratioHeight = ((float) targetWidth) / (float) options.outHeight;
        double ratio = Math.min(ratioWidth, ratioHeight);
        int dstWidth = (int) Math.round(ratio * options.outWidth);
        int dstHeight = (int) Math.round(ratio * options.outHeight);
        ratio = Math.floor(1.0 / ratio);
        int sample = nearest2pow((int) ratio);
 
        options.inJustDecodeBounds = false;
        if (sample <= 0) {
            sample = 1;
        }
        options.inSampleSize = (int) sample;
        options.inPurgeable = true;
        try {
            InputStream is;
            is = getContentResolver().openInputStream(uri);
            bitmap = BitmapFactory.decodeStream(is, null, options);
            Bitmap bitmap2 = Bitmap.createScaledBitmap(bitmap, dstWidth,
                    dstHeight, true);
            bitmap = bitmap2;
            is.close();
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
 
        return bitmap;
    }
    
    
    
    
    
    public Bitmap getImagePhotoUtils(Uri uri) {
        //Bitmap result = null;
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        InputStream is = null;
        try {
            is = this.getContentResolver().openInputStream(uri);
            BitmapFactory.decodeStream(is, null, options);
            is.close();     
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        generalOptions = options;
        return scaleImage(options, uri, 300);
    }
    
    
    
    
    
    public void setImage(Bitmap bitmap){
    	ImageView iv = (ImageView)findViewById(R.id.imagen_tab1);
		iv.setImageBitmap(bitmap);
    }
    
    
    
    
    
    public void showErrorToast(String phrase){
    	Toast.makeText(this, phrase, Toast.LENGTH_SHORT).show();    	
    }
    
    
    
    
    
    public void getImage(Uri uri) {
        Bitmap bounds = getImagePhotoUtils(uri);
        if (bounds != null) {
            setImage(bounds);
        } else {
            showErrorToast("imagen sin contenido");
 
        }
    }
    
    
    
    
    
    public Uri getImageUri(Context inContext, Bitmap inImage) {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        inImage.compress(Bitmap.CompressFormat.JPEG, 100, bytes);
        String path = Images.Media.insertImage(inContext.getContentResolver(), inImage, "Title", null);
        return Uri.parse(path);
    }
    
    
    
    
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data){
    	if (requestCode == ACTIVITY_SELECT_IMAGE && resultCode == RESULT_OK) {
    		mImageUri = data.getData();
    		getImage(mImageUri);
    	}
    	else if (requestCode == ACTIVITY_SELECT_FROM_CAMERA && resultCode == RESULT_OK) {
    			getImage(mImageUri);    		
    	}

    	// CALL THIS METHOD TO GET THE URI FROM THE BITMAP
		ImageView actualImage = (ImageView) findViewById(R.id.imagen_tab1);
		actualImage.buildDrawingCache();
		Bitmap actualBitmap = actualImage.getDrawingCache();
		
		imageUri_old = getImageUri(getApplicationContext(),actualBitmap);
		imageUri_new = mImageUri;   	
    }
    
    
    
    
        
    class HiloEliminarGuia extends Thread {
    	int id;
        
        public HiloEliminarGuia(int id) {
        	this.id = id;
        }

        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpDelete solicitud;
        	String BaseUrlPage;
        	BaseUrlPage = ip.ip+"/gl/guides/"+this.id+".json";
        	solicitud = new HttpDelete(BaseUrlPage);	
        	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));			
            try {
				cliente.execute(solicitud);
			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}							
            finish();
        }  
        	
    }
    
    
    
    
    
    public List<Guia> readJsonStream(HttpEntity in) throws IOException {
		JsonReader reader = new JsonReader(new InputStreamReader(in.getContent(), "UTF-8"));
		try {
			return readGuiasArray(reader);
		} 
		finally {
			reader.close();
		}
	}
    
    
    
    
    
    public List<Guia> readGuiasArray(JsonReader reader) throws IOException {
		List<Guia> guias = new ArrayList<Guia>();
		reader.beginArray();
		while (reader.hasNext()) {
			guias.add(readGuia(reader));
		}
		reader.endArray();
		return guias;
	}



    
    
	public Guia readGuia(JsonReader reader) throws IOException {
		Guia guide = new Guia();
		reader.beginObject();
		while (reader.hasNext()) {
			String name = reader.nextName();
			if (name.equals("id")) {
				guide.id = reader.nextInt();
			} 
			else if (name.equals("name")){
				guide.name = reader.nextString();
			} else if (name.equals("element_image_file_name")){
				guide.element_image_file_name = reader.nextString();
			} else if (name.equals("description")){
				guide.description = reader.nextString();
				if (guide.description.length() >= 200) guide.shortDescription = guide.description.substring(0, 199)+"...";
				else guide.shortDescription = guide.description;
			} else if (name.equals("technological_setting_id")){
				guide.technological_setting_id = reader.nextInt();
			} else if (name.equals("contextual_setting_id")){
				guide.contextual_setting_id = reader.nextInt();
			} else if (name.equals("activity_sequence_id")){
				guide.activity_sequence_id = reader.nextInt();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
		return guide;
	}
	
	
	
	
	
    
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
////////////////////                    FUNCIONES TAB 1                       ////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////    
	
	
	class ObtenerImagenTab1 extends Thread {
    	int id;
    	String UrlImage;
    	Context context;
            	
        public ObtenerImagenTab1(int id, String UrlImage, Context context) {
        	this.id = id;
        	this.UrlImage = UrlImage;
        	this.context = context;
        }

        @Override 
        public void run() {
        	System.out.println("ObtenerImagenTab1");
        	HttpClient cliente = new DefaultHttpClient();
        	HttpGet solicitud;
        	HttpResponse respuesta;
        	String BaseUrlPage = UrlImage;
        	System.out.println(BaseUrlPage);
        	solicitud = new HttpGet(BaseUrlPage);	
        	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
            try {
            	if (UrlImage.equals("none")){ // POR DEFECTO (NO IMAGE)
            		Bitmap bm = BitmapFactory.decodeResource(context.getResources(), R.drawable.imagen);
                    cargarVistasTab1(ImageHelper.getRoundedCornerBitmap(bm, 12, context));
           		}
           		else{
           			respuesta = cliente.execute(solicitud);
           			HttpEntity entity = respuesta.getEntity();
           			Bitmap loadedImage = BitmapFactory.decodeStream(entity.getContent());
           			if (loadedImage != null){
           				Bitmap cornerImage = ImageHelper.getRoundedCornerBitmap(loadedImage, 12, context);
           				cargarVistasTab1(cornerImage);
           			}
           		}					
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}				
         }        
    }
	
	
	
	
	
	public void cargarVistasTab1(final Bitmap roundedBitmapImage){
		runOnUiThread(new Runnable() {
	        public void run() {
	        	// GUARDAS EN LA CLASE GUIA	        	
	        	if (Titulo.equals("")) Titulo = "Titulo";
	        	if (Descripcion.equals("")) Descripcion = "Descripcion";
	        	guia.name = Titulo;
	        	guia.description = Descripcion;
	        	guia.imagen = roundedBitmapImage;
	        	ImageView imagen = (ImageView) findViewById(R.id.imagen_tab1);
	        	imagen.setImageBitmap(roundedBitmapImage);
	        	TextView titulo = (TextView) findViewById(R.id.titulo_tab1);
	        	titulo.setText(Titulo);
	        	TextView descripcion = (TextView) findViewById(R.id.descripcion_tab1);
	        	descripcion.setText(Descripcion);
	        }
	    });
	}
	
	
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
////////////////////                    FUNCIONES TAB 2                       ////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////	
	
	
	class ObtenerTab2 extends Thread {
    	int ts_id;
          	
        public ObtenerTab2(int ts_id) {
        	this.ts_id = ts_id;
        }

        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpResponse respuesta;
        	String BaseUrlPage;
        	BaseUrlPage = ip.ip+"/gl/technicalSettings/getWholeView.json?id="+this.ts_id;
        	System.out.println("URL TSETTING WHOLE VIEW:" + BaseUrlPage);
        	HttpGet	solicitud = new HttpGet(BaseUrlPage);	
        		solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
            	try {
            		
            		// PRUEBA
					respuesta = cliente.execute(solicitud);
					String json = EntityUtils.toString(respuesta.getEntity());
					System.out.println("JSON WHOLE VIEW TSETTING: "+json);
					// FIN DE PRUEBA
					
					respuesta = cliente.execute(solicitud);
					HttpEntity entity = respuesta.getEntity();
					List<TSetting> tsettingList = readJsonTSStream(entity);
					//System.out.println("Cargando vistas en Tab2\ntitulo= " + tsettingList.get(0).name + "\ndescripción= " + tsettingList.get(0).description);
					cargarVistasTab2(tsettingList.get(0).name, tsettingList.get(0).description);
					BaseUrlPage = ip.ip+"/gl/devices/getWholeView.json?id=";
		        	for (int i=0; i<tsettingList.get(0).devices_id.size(); i++){
		        		System.out.println("id="+tsettingList.get(0).devices_id.get(i));
		        		BaseUrlPage = BaseUrlPage + tsettingList.get(0).devices_id.get(i);
		        		if (i<tsettingList.get(0).devices_id.size()-1) BaseUrlPage = BaseUrlPage+",";        		
		        	}
		        	System.out.println(BaseUrlPage);
		        	solicitud = new HttpGet(BaseUrlPage);
		        	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
		            respuesta = cliente.execute(solicitud);
		        	entity = respuesta.getEntity();
					List<Dispositivo> DispList = readJsonDispStream(entity);
					// Guardar dispositivos de esta guía
					for (int i=0;i<DispList.size();i++){						
						almacenDisp.guardarDispositivo(DispList.get(i));
					}
					// Cada dispositivo tendrá una imagen
					if (DispList.size()>0) comenzarHiloImagenesDispositivo(DispList, "oldGallery");
					
					BaseUrlPage = ip.ip+"/gl/applications/getWholeView.json?id=";
		        	for (int i=0; i<tsettingList.get(0).applications_id.size(); i++){
		        		System.out.println("id="+tsettingList.get(0).applications_id.get(i));
		        		BaseUrlPage = BaseUrlPage + tsettingList.get(0).applications_id.get(i);
		        		if (i<tsettingList.get(0).applications_id.size()-1) BaseUrlPage = BaseUrlPage+",";        		
		        	}
		        	System.out.println(BaseUrlPage);
		        	solicitud = new HttpGet(BaseUrlPage);
		        	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
		            respuesta = cliente.execute(solicitud);
		        	entity = respuesta.getEntity();
		        	//String json = EntityUtils.toString(respuesta.getEntity());
					//System.out.println(json);
					List<Aplicacion> AppList = readJsonAppStream(entity);
					for (int i=0;i<AppList.size();i++){						
						almacenApp.guardarAplicacion(AppList.get(i));
					}
					if (AppList.size()>0) comenzarHiloImagenesAplicacion(AppList, "oldGallery");
            	} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}				
         }        
    }
	
	
	
	
	
	public static class AdaptadorGaleriaDispositivos extends BaseAdapter {
    	private Context contexto;
    	private Vector<Dispositivo> DispList;
    	
		public AdaptadorGaleriaDispositivos(Context context, Vector<Dispositivo> DispList) {
			super();
			this.contexto=context;
			this.DispList = DispList;
		}

		@Override
		public int getCount() {
			return this.DispList.size();
		}

		@Override
		public Dispositivo getItem(int position) {
			return this.DispList.elementAt(position);
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View arg1, ViewGroup arg2) {
			// TODO Auto-generated method stub
			ImageView imagen = new ImageView(contexto);
			if (this.DispList.get(position).image != null){
				Bitmap cornerImage = ImageHelper.getRoundedCornerBitmap(this.DispList.get(position).image, 12, this.contexto);
				imagen.setImageBitmap(cornerImage);
			}						
			imagen.setLayoutParams(new Gallery.LayoutParams(300, 300));
			return imagen;
		}
    }

    
    
    
    
    public static class AdaptadorGaleriaAplicaciones extends BaseAdapter {
    	private Context contexto;
    	private Vector<Aplicacion> AppList;
    	
		public AdaptadorGaleriaAplicaciones(Context context, Vector<Aplicacion> AppList) {
			super();
			this.contexto=context;
			this.AppList = AppList;
		}

		@Override
		public int getCount() {
			return this.AppList.size();
		}

		@Override
		public Aplicacion getItem(int position) {
			return this.AppList.elementAt(position);
		}

		@Override
		public long getItemId(int position) {
			return position;
		}

		@Override
		public View getView(int position, View arg1, ViewGroup arg2) {
			// TODO Auto-generated method stub
			ImageView imagen = new ImageView(contexto);
			if (this.AppList.get(position).image != null){
				Bitmap cornerImage = ImageHelper.getRoundedCornerBitmap(this.AppList.get(position).image, 12, this.contexto);
				imagen.setImageBitmap(cornerImage);
			}
			imagen.setLayoutParams(new Gallery.LayoutParams(300, 300));
			return imagen;
		}
    }

    
    
    
    
	public List<TSetting> readJsonTSStream(HttpEntity in) throws IOException {
		JsonReader reader = new JsonReader(new InputStreamReader(in.getContent(), "UTF-8"));
		try {
			return readTSArray(reader);
		} 
		finally {
			reader.close();
		}
	}
    
    
    
    
    
    public List<TSetting> readTSArray(JsonReader reader) throws IOException {
		List<TSetting> tsettings = new ArrayList<TSetting>();
		reader.beginArray();
		while (reader.hasNext()) {
			tsettings.add(readTSetting(reader));
		}
		reader.endArray();
		return tsettings;
	}

    
    
    
    
	public TSetting readTSetting(JsonReader reader) throws IOException {
		TSetting tsetting = new TSetting();
		reader.beginObject();
		while (reader.hasNext()) {
			String name = reader.nextName();
			if (name.equals("id")) {
				tsetting.id = reader.nextInt();
				//System.out.println("tsetting id=" +tsetting.id);
			} 
			else if (name.equals("name")){
				tsetting.name = reader.nextString();
				//System.out.println("tsetting titulo="+tsetting.name);
			} else if (name.equals("element_image_file_name")){
				tsetting.element_image_file_name = reader.nextString();
			} else if (name.equals("description")){
				tsetting.description = reader.nextString();
				//System.out.println("tsetting descripcion ="+tsetting.description);
			} else if (name.equals("devices_id")){
				reader.beginArray();	
				//int i=0;
				while (reader.hasNext()){
					reader.beginObject();
					String name2 = reader.nextName();					
					if (name2.equals("id")){
						tsetting.devices_id.add(reader.nextInt());
						//System.out.println("devices_id[" + i + "]="+tsetting.devices_id.get(i));
						//i++;
					}
					reader.endObject();
				}				
				reader.endArray();
			} else if (name.equals("applications_id")){
				reader.beginArray();
				//int i=0;
				while (reader.hasNext()){
					reader.beginObject();
					String name3 = reader.nextName();
					if (name3.equals("id")){
						tsetting.applications_id.add(reader.nextInt());
						//System.out.println("applications_id[" + i + "]="+tsetting.applications_id.get(i));
						//i++;
					}
					reader.endObject();
				}
				reader.endArray();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
		return tsetting;
	}
	
	
	
	
	
	public void cargarVistasTab2(final String TituloTS, final String DescripcionTS){
		runOnUiThread(new Runnable() {
	        public void run() {
	        	//ImageView imagen = (ImageView) findViewById(R.id.imagen_tab2);
	        	//imagen.setImageBitmap(bitmapImage);
	        	//System.out.println("Cargando vistas dentro de Tab2\ntitulo= " + TituloTS + "\ndescripción= " + DescripcionTS);
	        	TextView titulo = (TextView) findViewById(R.id.titulo_tab2);
	        	titulo.setText(TituloTS);
	        	guia.titulo_tab2 = TituloTS;
	        	TextView descripcion = (TextView) findViewById(R.id.descripcion_tab2);
	        	descripcion.setText(DescripcionTS);
	        	guia.descripcion_tab2 = DescripcionTS;
	        	
	        }
	    });
	}
	
	
	
	
	
	protected void comenzarHiloImagenesDispositivo(final List<Dispositivo> lista, final String galleryType){
		runOnUiThread(new Runnable() {
	        public void run() {
	        	HiloImagenesDispositivo hilo = new HiloImagenesDispositivo(lista, galleryType);
	        	hilo.start(); 
	        }
	    });
	}
	
	
	
	
	
	public List<Dispositivo> readJsonDispStream(HttpEntity in) throws IOException {
		JsonReader reader = new JsonReader(new InputStreamReader(in.getContent(), "UTF-8"));
		try {
			return readDispositivosArray(reader);
		} 
		finally {
			reader.close();
		}
	}
	
	
	
	
	
	public List<Dispositivo> readDispositivosArray(JsonReader reader) throws IOException {
		List<Dispositivo> dispositivos = new ArrayList<Dispositivo>();
		reader.beginArray();
		while (reader.hasNext()) {
			dispositivos.add(readDispositivo(reader));
		}
		reader.endArray();
		return dispositivos;
	}

	
	
	
	
	public Dispositivo readDispositivo(JsonReader reader) throws IOException {
		Dispositivo dispositivo = new Dispositivo();
		reader.beginObject();
		while (reader.hasNext()) {
			String name = reader.nextName();
			if (name.equals("id")) {
				dispositivo.id = reader.nextInt();
			} 
			else if (name.equals("name")){
				dispositivo.name = reader.nextString();
			} else if (name.equals("element_image_file_name")){
				dispositivo.element_image_file_name = reader.nextString();
			} else if (name.equals("description")){
				dispositivo.description = reader.nextString();
			} else if (name.equals("url")){
				dispositivo.url = reader.nextString();
			}else if (name.equals("image")){
				dispositivo.UrlImage = reader.nextString();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
		return dispositivo;
	}
	
	
	
	
	
	protected void comenzarHiloImagenesAplicacion(final List<Aplicacion> lista, final String galleryType){
		runOnUiThread(new Runnable() {
	        public void run() {
	        	HiloImagenesAplicacion hilo = new HiloImagenesAplicacion(lista, galleryType);
	        	hilo.start(); 
	        }
	    });
	}
	
	
	
	
	
	
	public List<Aplicacion> readJsonAppStream(HttpEntity in) throws IOException {
		JsonReader reader = new JsonReader(new InputStreamReader(in.getContent(), "UTF-8"));
		try {
			return readAppArray(reader);
		} 
		finally {
			reader.close();
		}
	}
	
	
	
	public List<Aplicacion> readAppArray(JsonReader reader) throws IOException {
		List<Aplicacion> dispositivos = new ArrayList<Aplicacion>();
		reader.beginArray();
		while (reader.hasNext()) {
			dispositivos.add(readApp(reader));
		}
		reader.endArray();
		return dispositivos;
	}

	
	
	
	
	public Aplicacion readApp(JsonReader reader) throws IOException {
		Aplicacion aplicacion = new Aplicacion();
		reader.beginObject();
		while (reader.hasNext()) {
			String name = reader.nextName();
			if (name.equals("id")) {
				aplicacion.id = reader.nextInt();
			} 
			else if (name.equals("name")){
				aplicacion.name = reader.nextString();
			} else if (name.equals("element_image_file_name")){
				aplicacion.element_image_file_name = reader.nextString();
			} else if (name.equals("description")){
				aplicacion.description = reader.nextString();
			} else if (name.equals("url")){
				aplicacion.url = reader.nextString();
			} else if (name.equals("image")){
				aplicacion.UrlImage = reader.nextString();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
		return aplicacion;
	}
	
	
	
	
	
	public void actualizarGaleriaDispositivos(final List<Dispositivo> DispList, final String galleryType){
    	final Intent intent = new Intent(this, VistaDispositivo.class);
    	final AlertDialog.Builder dialog = new AlertDialog.Builder(this); 
    	final Gallery galeria;
    	final AdaptadorGaleriaDispositivos adapter;
    	
        if (galleryType.equals("oldGallery")){
        	galeria = galeriaDispositivos;
        	adapter = galleryAdapterDisp;
        }
        else if (galleryType.equals("newGallery")){
        	galeria = galeriaNuevosDispositivos;
        	adapter = galleryAdapterNewDisp;
        }
        else{
        	galeria = galeriaDispositivos;
        	adapter = galleryAdapterDisp;
        }
        
		runOnUiThread(new Runnable() {
	        public void run() {	        	 
	        	
	        	
	            galeria.setOnItemClickListener(new OnItemClickListener(){
	            	@Override
	    			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2, long arg3) {
	            		
	            			intent.putExtra("id", DispList.get(arg2).id);
	            			intent.putExtra("titulo", DispList.get(arg2).name);
	            			intent.putExtra("imageName", DispList.get(arg2).element_image_file_name);
	            			intent.putExtra("UrlImage", DispList.get(arg2).UrlImage);
	            			intent.putExtra("description", DispList.get(arg2).description);
	    					startActivity(intent);
	    			}
	            	
	            });
	            
	            if (galleryType.equals("oldGallery")&(modo_edicion=="true")){
	            galeria.setOnItemLongClickListener(new OnItemLongClickListener() {
					@Override
					public boolean onItemLongClick(AdapterView<?> arg0,	View arg1, final int arg2, long arg3) {		    		   		
			    		dialog.setTitle("Advertencia");
			    		dialog.setMessage("¿Quieres eliminar este dispositivo?");
			    		dialog.setCancelable(false);
			    		dialog.setPositiveButton("Si", new DialogInterface.OnClickListener() {   		 
			    		   @Override
			    		   public void onClick(DialogInterface dialog, int which) {
			    			  eliminarDispositivo(DispList, DispList.get(arg2).id, arg2);
			    		      dialog.cancel();
			    		   }
			    		});  	
			    		dialog.setNegativeButton("No", new DialogInterface.OnClickListener() {   		 
				    		   @Override
				    		   public void onClick(DialogInterface dialog, int which) {
				    		      dialog.cancel();
				    		   }
				    	});  	
			    		dialog.show();
						return false;
					}
				});
	        	}
	        	else if (galleryType.equals("newGallery")){
	        		galeria.setOnItemLongClickListener(new OnItemLongClickListener() {
						@Override
						public boolean onItemLongClick(AdapterView<?> arg0,	View arg1, final int arg2, long arg3) {		    		   		
				    		dialog.setTitle("Advertencia");
				    		dialog.setMessage("¿Quieres añadir este dispositivo?");
				    		dialog.setCancelable(false);
				    		dialog.setPositiveButton("Si", new DialogInterface.OnClickListener() {   		 
				    		   @Override
				    		   public void onClick(DialogInterface dialog, int which) {
				    			  addDispositivo(DispList, DispList.get(arg2).id, arg2);
				    		      dialog.cancel();
				    		   }
				    		});  	
				    		dialog.setNegativeButton("No", new DialogInterface.OnClickListener() {   		 
					    		   @Override
					    		   public void onClick(DialogInterface dialog, int which) {
					    		      dialog.cancel();
					    		   }
					    	});  	
				    		dialog.show();
							return false;
						}
					});
	        	}
	        	
	            adapter.notifyDataSetChanged();
	         
	        }
	    });
	}
	
	
	
	
	
	public void actualizarGaleriaAplicaciones(final List<Aplicacion> AppList, final String galleryType){
    	final Intent intent = new Intent(this, VistaAplicacion.class);
    	final AlertDialog.Builder dialog = new AlertDialog.Builder(this);
    	final Gallery galeria;
    	final AdaptadorGaleriaAplicaciones adapter;
    	
        if (galleryType.equals("oldGallery")){
        	galeria = galeriaAplicaciones;
        	adapter = galleryAdapterApp;
        }
        else if (galleryType.equals("newGallery")){
        	galeria = galeriaNuevasAplicaciones;
        	adapter = galleryAdapterNewApp;
        }
        else{
        	galeria = galeriaAplicaciones;
        	adapter = galleryAdapterApp;
        }
        
		runOnUiThread(new Runnable() {
	        public void run() {
	        	galeria.setOnItemClickListener(new OnItemClickListener(){
	            	@Override
	    			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,
	    					long arg3) {
	            			intent.putExtra("id", AppList.get(arg2).id);
	            			intent.putExtra("titulo", AppList.get(arg2).name);
	            			intent.putExtra("imageName", AppList.get(arg2).element_image_file_name);
	            			intent.putExtra("UrlImage", AppList.get(arg2).UrlImage);
	            			intent.putExtra("description", AppList.get(arg2).description);
	    					startActivity(intent);
	    			}
	            });
	        	
	        	if (galleryType.equals("oldGallery")&(modo_edicion=="true")){
	        	galeria.setOnItemLongClickListener(new OnItemLongClickListener() {
					@Override
					public boolean onItemLongClick(AdapterView<?> arg0,	View arg1, final int arg2, long arg3) {		    		   		
			    		dialog.setTitle("Advertencia");
			    		dialog.setMessage("¿Quieres eliminar esta aplicación?");
			    		dialog.setCancelable(false);
			    		dialog.setPositiveButton("Si", new DialogInterface.OnClickListener() {   		 
			    		   @Override
			    		   public void onClick(DialogInterface dialog, int which) {
			    			  eliminarAplicacion(AppList, AppList.get(arg2).id, arg2);
			    		      dialog.cancel();
			    		   }
			    		});  	
			    		dialog.setNegativeButton("No", new DialogInterface.OnClickListener() {   		 
				    		   @Override
				    		   public void onClick(DialogInterface dialog, int which) {
				    		      dialog.cancel();
				    		   }
				    	});  	
			    		dialog.show();
						return false;
					}
				});
	        	}
	        	else if (galleryType.equals("newGallery")){
	        		galeria.setOnItemLongClickListener(new OnItemLongClickListener() {
						@Override
						public boolean onItemLongClick(AdapterView<?> arg0,	View arg1, final int arg2, long arg3) {		    		   		
				    		dialog.setTitle("Advertencia");
				    		dialog.setMessage("¿Quieres añadir esta aplicación?");
				    		dialog.setCancelable(false);
				    		dialog.setPositiveButton("Si", new DialogInterface.OnClickListener() {   		 
				    		   @Override
				    		   public void onClick(DialogInterface dialog, int which) {
				    			  addAplicacion(AppList, AppList.get(arg2).id, arg2);
				    		      dialog.cancel();
				    		   }
				    		});  	
				    		dialog.setNegativeButton("No", new DialogInterface.OnClickListener() {   		 
					    		   @Override
					    		   public void onClick(DialogInterface dialog, int which) {
					    		      dialog.cancel();
					    		   }
					    	});  	
				    		dialog.show();
							return false;
						}
					});
	        	}
	        	
	        	adapter.notifyDataSetChanged();
	        }
	    });
	}
	
	
	
	
	
	public void eliminarDispositivo(List<Dispositivo> DispList, int idDisp, int position){
    	almacenDisp.borrarDispositivo(idDisp);  
    	DispList.remove(position);
    	galleryAdapterDisp.notifyDataSetChanged();
    	new EnviarContextoTecnico("", "", null, ts_id, idDisp, -1, -1, -1).start();
    }
    
    
    
    
    
    public void addDispositivo(List<Dispositivo> DispList, int idDisp, int position){
    	almacenDisp.guardarDispositivo(DispList.get(position));
    	galleryAdapterDisp.notifyDataSetChanged();
    	new EnviarContextoTecnico("", "", null, ts_id, -1, -1, idDisp, -1).start();
    }
    
    
    
    
    public void eliminarAplicacion(List<Aplicacion> AppList, int idApp, int position){
    	almacenApp.borrarAplicacion(idApp);  
    	AppList.remove(position);
    	galleryAdapterApp.notifyDataSetChanged();
    	new EnviarContextoTecnico("", "", null, ts_id, -1, idApp, -1, -1).start();
    }
    
    
    
    
    
    public void addAplicacion(List<Aplicacion> AppList, int idApp, int position){
    	almacenApp.guardarAplicacion(AppList.get(position));
    	galleryAdapterApp.notifyDataSetChanged();
    	new EnviarContextoTecnico("", "", null, ts_id, -1, -1, -1, idApp).start();
    }
    
    
    
    
    
    public String getRealPathFromURI(Uri uri) {
        Cursor cursor = getContentResolver().query(uri, null, null, null, null); 
        cursor.moveToFirst(); 
        int idx = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA); 
        return cursor.getString(idx); 
    }
    
    
    
    	
	
	class HiloImagenesDispositivo extends Thread {
    	List<Dispositivo> DispList;
    	String galleryType;
           	
        public HiloImagenesDispositivo(List<Dispositivo> lista, String galleryType) {
        	this.DispList = lista;
        	this.galleryType = galleryType;
        }

        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpGet solicitud;
        	HttpResponse respuesta;
        	String BaseUrlPage;
        	for(int i=0;i<this.DispList.size();i++){
        		if (this.DispList.get(i).UrlImage.equals("none")){}
        		else{
        			BaseUrlPage = ip.ip+this.DispList.get(i).UrlImage;
        			System.out.println(BaseUrlPage);
        			solicitud = new HttpGet(BaseUrlPage);	
        			solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
        			try {
        				respuesta = cliente.execute(solicitud);
        				HttpEntity entity = respuesta.getEntity();
        				Bitmap loadedImage = BitmapFactory.decodeStream(entity.getContent());
        				if (this.galleryType.equals("oldGallery")){
        					almacenDisp.setImage(this.DispList.get(i).id, loadedImage);
        					System.out.println("URLimage= " + this.DispList.get(i).UrlImage);
        					actualizarGaleriaDispositivos(this.DispList, "oldGallery");
        				}
        				else if (this.galleryType.equals("newGallery")){
        					almacenNuevosDisp.setImage(this.DispList.get(i).id, loadedImage);
        					actualizarGaleriaDispositivos(this.DispList, "newGallery");
        				}					
        			} catch (ClientProtocolException e) {
        				e.printStackTrace();
        			} catch (IOException e) {
        				e.printStackTrace();
        			}		
        		}
        	}        		
        }        
    }
	
	
	
	
	
	
	class HiloImagenesAplicacion extends Thread {
    	List<Aplicacion> AppList;
        String galleryType;
        
        public HiloImagenesAplicacion(List<Aplicacion> lista, String galleryType) {
        	this.AppList = lista;
        	this.galleryType = galleryType;
        }
        
        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpGet solicitud;
        	HttpResponse respuesta;
        	String BaseUrlPage;
        	for(int i=0;i<this.AppList.size();i++){
        		if (this.AppList.get(i).UrlImage.equals("none")){}
        		else{
        		BaseUrlPage = ip.ip+this.AppList.get(i).UrlImage;
        		System.out.println(BaseUrlPage);
        		solicitud = new HttpGet(BaseUrlPage);	
            	try {
					HttpContext localContext = null;
					respuesta = cliente.execute(solicitud, localContext);
					HttpEntity entity = respuesta.getEntity();
					Bitmap loadedImage = BitmapFactory.decodeStream(entity.getContent());
					almacenApp.setImage(this.AppList.get(i).id, loadedImage);
					if (this.galleryType.equals("oldGallery")){
						almacenApp.setImage(this.AppList.get(i).id, loadedImage);
						actualizarGaleriaAplicaciones(this.AppList, "oldGallery");
					}
					else if (this.galleryType.equals("newGallery")){
						almacenNuevasApp.setImage(this.AppList.get(i).id, loadedImage);
						actualizarGaleriaAplicaciones(this.AppList, "newGallery");
					}
				} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}	
        		}
        	}        		
        }        
    }
	
	
	
	
	
    class EnviarContextoTecnico extends Thread {
    	String titulo, descripcion;
    	int CTid;
        Uri imageUri;
        int deleteDispId, addDispId;
        int deleteAppId, addAppId;
        
        public EnviarContextoTecnico(String titulo, String descripcion, Uri imageUri, int CTid, int deleteDispId, int deleteAppId, int addDispId, int addAppId) {
        	this.descripcion = descripcion;
        	this.titulo = titulo;
        	this.CTid = CTid;
        	this.imageUri = imageUri;
        	this.deleteDispId = deleteDispId;
        	this.deleteAppId = deleteAppId;
        	this.addDispId = addDispId;
        	this.addAppId = addAppId;
        }

        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpPut solicitud;
        	HttpDelete solicitudBorrar;
        	String BaseUrlPage;
        	BaseUrlPage = ip.ip+"/gl/technicalSettings/"+this.CTid+".json";
        	
            MultipartEntity mpEntity = new MultipartEntity();
			try {
				if (this.titulo.equals("")){}
				else{
					ContentBody titleBody = new StringBody(this.titulo);				
					mpEntity.addPart("title", titleBody);
				}
				if (this.descripcion.equals("")){}
				else{
					ContentBody descBody = new StringBody(this.descripcion);
					mpEntity.addPart("description", descBody);
				}
				if (this.imageUri == null){}
				else{
					System.out.println("imageUri en enviarcabecera="+this.imageUri);
					File file = new File(getRealPathFromURI(this.imageUri));
					ContentBody fotoBody = new FileBody(file, "image/jpeg");
					mpEntity.addPart("image", fotoBody);
				}
				
				
				
				if (this.deleteDispId > 0){
					BaseUrlPage = ip.ip+"/gl/technicalSettings/deleteRequirements.json";
					BaseUrlPage = BaseUrlPage + "?technological_setting_id=" + this.CTid;
					BaseUrlPage = BaseUrlPage + "&devices="+this.deleteDispId;
					//System.out.println(BaseUrlPage);
					solicitudBorrar = new HttpDelete(BaseUrlPage);
					solicitudBorrar.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
					cliente.execute(solicitudBorrar);	
				}
				else if (this.deleteAppId > 0){
					BaseUrlPage = ip.ip+"/gl/technicalSettings/deleteRequirements.json";
					BaseUrlPage = BaseUrlPage + "?technological_setting_id=" + this.CTid;
					BaseUrlPage = BaseUrlPage + "&applications="+this.deleteAppId;
					solicitudBorrar = new HttpDelete(BaseUrlPage);
					solicitudBorrar.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
					cliente.execute(solicitudBorrar);	
				}
				else if (this.addDispId > 0){
					BaseUrlPage = ip.ip+"/gl/technicalSettings/addRequirements.json";
					BaseUrlPage = BaseUrlPage + "?technological_setting_id=" + this.CTid;
					BaseUrlPage = BaseUrlPage + "&devices="+this.addDispId;
					solicitud = new HttpPut(BaseUrlPage);
					solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
					cliente.execute(solicitud);
				}
				else if (this.addAppId > 0){
					BaseUrlPage = ip.ip+"/gl/technicalSettings/addRequirements.json";
					BaseUrlPage = BaseUrlPage + "?technological_setting_id=" + this.CTid;
					BaseUrlPage = BaseUrlPage + "&applications="+this.addAppId;
					solicitud = new HttpPut(BaseUrlPage);
					solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
					cliente.execute(solicitud);
				}
				else{
					solicitud = new HttpPut(BaseUrlPage);
					solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
					solicitud.setEntity(mpEntity);
					cliente.execute(solicitud);	
				}
				
				
				
				System.out.println(BaseUrlPage);
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}				
        }        
    }
    
    
    
    
    
    public void obtenerListaDispositivos(View view){    	
    	// GALERIAS
    	Gallery galeria = (Gallery) findViewById(R.id.galleryNuevosDisp_tab2);
    	galeria.setVisibility(View.VISIBLE);  
    	new GetDevices(ts_id, preferences.getString("Cookie", "0")).start();	
    }
    
    
    
    
    
    public class GetDevices extends Thread {
		String cookie;
		
		public GetDevices(int ct_id, String cookie){
			this.cookie = cookie;
		}
		
		@Override 
	    public void run() {
	    	HttpClient cliente = new DefaultHttpClient();
	    	HttpGet solicitud;
	    	HttpResponse respuesta;
	    	String BaseUrlPage;
	    	BaseUrlPage = ip.ip+"/gl/devices.json";
	    	System.out.println(BaseUrlPage);
	    	solicitud = new HttpGet(BaseUrlPage);	
	    	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+ this.cookie);
	        try {
				respuesta = cliente.execute(solicitud);
				//String json = EntityUtils.toString(respuesta.getEntity());
				//System.out.println("RESPUESTA:\n"+json);
				HttpEntity entity = respuesta.getEntity();
				List<Dispositivo> IdList = readJsonDispStream(entity);
				BaseUrlPage = "http://193.146.210.92:3000/gl/devices/getWholeView.json?id=";
				System.out.println(BaseUrlPage);
	        	for (int i=0; i<IdList.size(); i++){
	        		BaseUrlPage = BaseUrlPage + IdList.get(i).id;
	        		if (i<IdList.size()-1) BaseUrlPage = BaseUrlPage+",";        		
	        	}		
	        	System.out.println("BaseUrlPage");
	        	System.out.println(BaseUrlPage);
	        	solicitud = new HttpGet(BaseUrlPage);
	        	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+this.cookie);
	            respuesta = cliente.execute(solicitud);
	        	entity = respuesta.getEntity();
	        	//System.out.println("RESPUESTA: \n"+EntityUtils.toString(entity));
	        	List<Dispositivo> DispList = readJsonDispStream(entity);
	        	for (int i=0; i<DispList.size(); i++){
	        		almacenNuevosDisp.guardarDispositivo(DispList.get(i));        		
	        	}	
	        	// Cada dispositivo tendrá una imagen
				if (DispList.size()>0) comenzarHiloImagenesDispositivo(DispList, "newGallery");
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}				
	     }        

		
	}
    
    
    
    
    
    public void obtenerListaAplicaciones(View view){      
    	// GALERIAS
    	Gallery galeria = (Gallery) findViewById(R.id.galleryNuevasApp_tab2);
    	galeria.setVisibility(View.VISIBLE);
    	new GetApplications(ts_id, preferences.getString("Cookie", "0")).start();   	
    }
    
    
    
    
    
    
    public class GetApplications extends Thread {
		String cookie;
		
		public GetApplications(int ct_id, String cookie){
			this.cookie = cookie;
		}
		
		@Override 
	    public void run() {
	    	HttpClient cliente = new DefaultHttpClient();
	    	HttpGet solicitud;
	    	HttpResponse respuesta;
	    	String BaseUrlPage;
	    	BaseUrlPage = ip.ip+"/gl/applications.json";
	    	System.out.println(BaseUrlPage);
	    	solicitud = new HttpGet(BaseUrlPage);	
	    	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+ this.cookie);
	        try {
				respuesta = cliente.execute(solicitud);
				HttpEntity entity = respuesta.getEntity();
				List<Aplicacion> IdList = readJsonAppStream(entity);
				BaseUrlPage = ip.ip+"/gl/applications/getWholeView.json?id=";
				System.out.println(BaseUrlPage);
	        	for (int i=0; i<IdList.size(); i++){
	        		BaseUrlPage = BaseUrlPage + IdList.get(i).id;
	        		if (i<IdList.size()-1) BaseUrlPage = BaseUrlPage+",";        		
	        	}		
	        	System.out.println("BaseUrlPage");
	        	System.out.println(BaseUrlPage);
	        	solicitud = new HttpGet(BaseUrlPage);
	        	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+this.cookie);
	            respuesta = cliente.execute(solicitud);
	        	entity = respuesta.getEntity();
	        	//System.out.println(EntityUtils.toString(entity));
	        	List<Aplicacion> AppList = readJsonAppStream(entity);
	        	for (int i=0; i<AppList.size(); i++){
	        		almacenNuevasApp.guardarAplicacion(AppList.get(i));        		
	        	}	
	        	// Cada dispositivo tendrá una imagen
				if (AppList.size()>0) comenzarHiloImagenesAplicacion(AppList, "newGallery");
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}				
	     }        

		
	}
    
    
    public void ver_dispositivos(View view){
	      Intent intent = new Intent(this, VerDispositivos.class);
	      intent.putExtra("ts_id", ts_id);
	      startActivity(intent);
	}  
    
    public void ver_aplicaciones(View view){
	      Intent intent = new Intent(this, VerAplicaciones.class);
	      intent.putExtra("ts_id", ts_id);
	      startActivity(intent);
	}  
    
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
////////////////////                    FUNCIONES TAB 3                       ////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////    
    
    
    
    class ObtenerTab3 extends Thread {
    	int cs_id;
          	
        public ObtenerTab3(int cs_id) {
        	this.cs_id = cs_id;
        }

        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpGet solicitud;
        	HttpResponse respuesta;
        	String BaseUrlPage;
        	BaseUrlPage = ip.ip+"/gl/educationalSettings/getWholeView.json?id="+this.cs_id;
        	System.out.println(BaseUrlPage);
        		solicitud = new HttpGet(BaseUrlPage);	
        		solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
            	try {
					respuesta = cliente.execute(solicitud);
					HttpEntity entity = respuesta.getEntity();
					List<ESetting> esettingList = readJsonESStream(entity);
					//System.out.println("Cargando vistas en Tab2\ntitulo= " + tsettingList.get(0).name + "\ndescripción= " + tsettingList.get(0).description);
					cargarVistasTab3(esettingList);
					//String json = EntityUtils.toString(respuesta.getEntity());
					//System.out.println("RESPUESTA JSON DE EDUCATIONAL SETTINGS:\n" + json);

            	} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}				
         }        
    }
    
    
    
    
    
    public List<ESetting> readJsonESStream(HttpEntity in) throws IOException {
		JsonReader reader = new JsonReader(new InputStreamReader(in.getContent(), "UTF-8"));
		try {
			return readESArray(reader);
		} 
		finally {
			reader.close();
		}
	}
    
    
    
    
    
    public List<ESetting> readESArray(JsonReader reader) throws IOException {
		List<ESetting> esettings = new ArrayList<ESetting>();
		reader.beginArray();
		while (reader.hasNext()) {
			esettings.add(readESetting(reader));
		}
		reader.endArray();
		return esettings;
	}

    
    
    
    
	public ESetting readESetting(JsonReader reader) throws IOException {
		String aux;
		ESetting esetting = new ESetting();
		reader.beginObject();
		while (reader.hasNext()) {
			String name = reader.nextName();
			if (name.equals("id")) {
				esetting.id = reader.nextInt();
				//System.out.println("tsetting id=" +tsetting.id);
			} 
			else if (name.equals("name")){
				esetting.name = reader.nextString();
				//System.out.println("tsetting titulo="+tsetting.name);
			} else if (name.equals("image")){
				esetting.image = reader.nextString();
			} else if (name.equals("description")){
				esetting.description = reader.nextString();
				//System.out.println("tsetting descripcion ="+tsetting.description);
			}else if (name.equals("age_range")){
				esetting.age_range = reader.nextString();
			}else if (name.equals("start_date")){
				esetting.start_date = reader.nextString();
			}else if (name.equals("end_date")){
				esetting.end_date = reader.nextString();
			}else if (name.equals("keywords")){
				esetting.keywords = reader.nextString();
			}else if (name.equals("latitude")){
				if ((aux=reader.nextString()).equals("")){}
				else esetting.latitude = Double.parseDouble(aux);
			}else if (name.equals("longitude")){
				if ((aux=reader.nextString()).equals("")){}
				else esetting.longitude = Double.parseDouble(aux);
			}else if (name.equals("private")){
				esetting.privado = reader.nextString();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
		return esetting;
	}
	
	
	
	
	public void cargarVistasTab3(final List<ESetting> lista){
		runOnUiThread(new Runnable() {
	        public void run() {
	        	//ImageView imagen = (ImageView) findViewById(R.id.imagen_tab2);
	        	//imagen.setImageBitmap(bitmapImage);
	        	//TextView string = (TextView) findViewById(R.id.textView_titulo_tab3);
	        	//string.setText(lista.get(0).name);
	        	guia.titulo_tab3 = lista.get(0).name;
	        	//string = (TextView) findViewById(R.id.textView_materia);
	        	//string.setText(lista.get(0).description);
	        	guia.materia = lista.get(0).description;
	        	//string = (TextView) findViewById(R.id.textView_keywords);
	        	//string.setText(lista.get(0).keywords);
	        	guia.keywords = lista.get(0).keywords;
	        	//string = (TextView) findViewById(R.id.textView_rangoEdades);
	        	//string.setText(lista.get(0).age_range)
	        	guia.rango_edades = lista.get(0).age_range;
	        	//string = (TextView) findViewById(R.id.textView_nivelEducativo);
	        	//string.setText("indefinido");
	        	guia.nivel_educativo = "indefinido";
	        	//string = (TextView) findViewById(R.id.textView_lenguaje);
	        	//string.setText("indefinido");
	        	guia.lenguaje = "indefinido";
	        	//string = (TextView) findViewById(R.id.textView_fechaInicio);
	        	//string.setText(lista.get(0).start_date);
	        	guia.fecha_inicio = lista.get(0).start_date;
	        	//string = (TextView) findViewById(R.id.textView_fechaFin);
	        	//string.setText(lista.get(0).end_date);
	        	guia.fecha_fin = lista.get(0).end_date;        	
	        	// Mapa
	        	guia.latitud = lista.get(0).latitude;
	        	guia.longitud = lista.get(0).longitude;
	        	
	        	//System.out.println("latitud: " + lista.get(0).latitude + " longitud: " + lista.get(0).longitude);
	        	//CameraUpdate cam = CameraUpdateFactory.newLatLng(new LatLng(lista.get(0).latitude, lista.get(0).longitude));  
                //mapa.moveCamera(cam);
                // Asigno un nivel de zoom
                //CameraUpdate ZoomCam = CameraUpdateFactory.zoomTo(8);
                //mapa.animateCamera(ZoomCam);
                // Añadir marcador
                //mapa.addMarker(new MarkerOptions().position(new LatLng(lista.get(0).latitude, lista.get(0).longitude)));
                // EJEMPLO
                /*mapa.setOnCameraChangeListener(new OnCameraChangeListener() {
            	    public void onCameraChange(CameraPosition position) {
            	        Toast.makeText(
            	            VistaGuia.this,
            	            "Cambio Cámara\n" +
            	            "Lat: " + position.target.latitude + "\n" +
            	            "Lng: " + position.target.longitude + "\n" +
            	            "Zoom: " + position.zoom + "\n" +
            	            "Orientación: " + position.bearing + "\n" +
            	            "Ángulo: " + position.tilt,
            	            Toast.LENGTH_SHORT).show();
            	    }
            	});*/
	        	
	        }
	    });
	}
	
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
////////////////////                   FUNCIONES TAB 4                        ////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////	
	
	
	
	class ObtenerTab4 extends Thread {
    	int ts_id;
          	
        public ObtenerTab4() {
        	
        }

        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpPost solicitud;
        	HttpResponse respuesta;
        	String BaseUrlPage;
        	BaseUrlPage = ip.ip+"/gl/activities/create.json?template=15";
        	System.out.println(BaseUrlPage);
        	solicitud = new HttpPost(BaseUrlPage);	
        	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
            try {
				respuesta = cliente.execute(solicitud);
				String json = EntityUtils.toString(respuesta.getEntity());
				System.out.println("respuesta TAB4:"+json);
            	} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}				
         }        
    }
	
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
////////////////////             FUNCIONES DE LOS FRAGMENTS                   ////////////////////
////////////////////                                                          ////////////////////
////////////////////                                                          ////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////	
	
	
	/**
     * A {@link FragmentPagerAdapter} that returns a fragment corresponding to
     * one of the sections/tabs/pages.
     */
    public class SectionsPagerAdapter extends FragmentPagerAdapter {

        public SectionsPagerAdapter(FragmentManager fm) {
            super(fm);
        }

        @Override
        public Fragment getItem(int position) {
        	// getItem se llama para instanciar el fragmento para la pagina dada.
        	// Devuelve un PlaceholderFragment (definido debajo como una clase interna static).
        	System.out.println("position=" + position);
        	if (position == 2) return PlaceholderMapFragment.newInstance(position+1);
        	else return PlaceholderFragment.newInstance(position + 1);
            
          
        }

        @Override
        public int getCount() {
            // Show 4 total pages.
            return 4;
        }

        @Override
        public CharSequence getPageTitle(int position) {
            Locale l = Locale.getDefault();
            switch (position) {
                case 0:
                    return getString(R.string.title_section1).toUpperCase(l);
                case 1:
                    return getString(R.string.title_section2).toUpperCase(l);
                case 2:
                    return getString(R.string.title_section3).toUpperCase(l);
                case 3:
                	return getString(R.string.title_section4).toUpperCase(l);
            }
            return null;
        }
        
    }
    
    
    
    
    
    
    
    
    
    
    /**
     * Un placeholder fragment contiene una vista simple.
     */
    public static class PlaceholderFragment extends Fragment {
        /**
         * El argument del fragmento representa el numero de seccion para este fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";

        /**
         * Devuelve una nueva instancia de este fragment para el numero de seccion dada.
         */
        public static PlaceholderFragment newInstance(int sectionNumber) {
        	
            PlaceholderFragment fragment = new PlaceholderFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            System.out.println("ActionBarTabs PlaceholderFragment newInstance= "+ sectionNumber);
            return fragment;
        }

        
              
        public PlaceholderFragment() {
        
        }

        
        
        
        
        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        	View rootView = null;
        	int section_number = getArguments().getInt(ARG_SECTION_NUMBER);
        	if (section_number==1){
        		rootView = inflater.inflate(R.layout.vista_guia_fragment1, container, false);
        		System.out.println("onCreateView fragment1");
        		//TextView textView = (TextView) rootView.findViewById(R.id.section_label);
        		//textView.setText(Integer.toString(getArguments().getInt(ARG_SECTION_NUMBER)));
	        	ImageView imagen = (ImageView) rootView.findViewById(R.id.imagen_tab1);
	        	imagen.setImageBitmap(guia.imagen);
	        	TextView titulo = (TextView) rootView.findViewById(R.id.titulo_tab1);
	        	titulo.setText(guia.name);
	        	TextView descripcion = (TextView) rootView.findViewById(R.id.descripcion_tab1);
	        	descripcion.setText(guia.description);
        		return rootView;
        	}       	
        	else if (section_number==2){
        		rootView = inflater.inflate(R.layout.vista_guia_fragment2, container, false);
        		System.out.println("onCreateView fragment2");
        		
        		galeriaDispositivos = (Gallery) rootView.findViewById(R.id.galleryDisp_tab2);
                galeriaDispositivos.setAdapter(galleryAdapterDisp);       
                
            	galeriaNuevosDispositivos = (Gallery) rootView.findViewById(R.id.galleryNuevosDisp_tab2);
            	galeriaNuevosDispositivos.setAdapter(galleryAdapterNewDisp);
            	
                galeriaAplicaciones = (Gallery) rootView.findViewById(R.id.galleryApp_tab2);                
                galeriaAplicaciones.setAdapter(galleryAdapterApp);
                
                galeriaNuevasAplicaciones = (Gallery) rootView.findViewById(R.id.galleryNuevasApp_tab2);                
                galeriaNuevasAplicaciones.setAdapter(galleryAdapterNewApp);
                
                TextView titulo = (TextView) rootView.findViewById(R.id.titulo_tab2);
	        	titulo.setText(guia.titulo_tab2);
	        	TextView descripcion = (TextView) rootView.findViewById(R.id.descripcion_tab2);
	        	descripcion.setText(guia.descripcion_tab2);
                
        	}
        	else if (section_number==4){
        		rootView = inflater.inflate(R.layout.vista_guia_fragment4, container, false);
        		System.out.println("onCreateView fragment4");
        	}
        	if (rootView == null) System.out.println("rootView = null");
        	return rootView;
        }
        
       
        
    }

        
    
    
    
    
    
    
    
    
    /**
     * Un placeholder fragment contiene una vista simple.
     */
    public static class PlaceholderMapFragment extends Fragment {
        /**
         * El argument del fragmento representa el numero de seccion para este fragment.
         */
        private static final String ARG_SECTION_NUMBER = "section_number";
        private static View rootView;
        /**
         * Devuelve una nueva instancia de este fragment para el numero de seccion dada.
         */
        public static PlaceholderMapFragment newInstance(int sectionNumber) {
            PlaceholderMapFragment fragment = new PlaceholderMapFragment();
            Bundle args = new Bundle();
            args.putInt(ARG_SECTION_NUMBER, sectionNumber);
            fragment.setArguments(args);
            System.out.println("ActionBarTabs PlaceholderFragment newInstance= "+ sectionNumber);
            return fragment;
        }

        
              
        public PlaceholderMapFragment() {
        
        }

        
        
        
        
        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        	
        	int section_number = getArguments().getInt(ARG_SECTION_NUMBER);
        	
        	if (section_number==3){
        		
        		if (rootView != null) {
        	        ViewGroup parent = (ViewGroup) rootView.getParent();
        	        if (parent != null)
        	            parent.removeView(rootView);
        	    }
        	    try {
        	        rootView = inflater.inflate(R.layout.vista_guia_fragment3, container, false);
        	    } catch (InflateException e) {
        	        /* map is already there, just return view as it is */
        	    }
                
        		System.out.println("onCreateView fragment3");
        		
        		mapa = ((MapFragment) getActivity().getFragmentManager().findFragmentById(R.id.map)).getMap();
                
        		mapa.setMapType(GoogleMap.MAP_TYPE_NORMAL);   
                // Muevo la camara
                CameraUpdate cam = CameraUpdateFactory.newLatLng(new LatLng(guia.latitud, guia.longitud));  
                mapa.moveCamera(cam);
                // asigno un marcador
                mapa.addMarker(new MarkerOptions().position(new LatLng(guia.latitud, guia.longitud)));
                // Asigno un nivel de zoom
                CameraUpdate ZoomCam = CameraUpdateFactory.zoomTo(8);
                mapa.animateCamera(ZoomCam);
                // MAPA
                // Si hacemos Click
            	mapa.setOnMapClickListener(new OnMapClickListener() {
            			public void onMapClick(LatLng point) {
            				// Añadir marcador
            				mapa.clear();
            				mapa.addMarker(new MarkerOptions().position(new LatLng(point.latitude, point.longitude)));
            				
            			}
            	  });
        	}
			return rootView;
        }   
    }    
}
