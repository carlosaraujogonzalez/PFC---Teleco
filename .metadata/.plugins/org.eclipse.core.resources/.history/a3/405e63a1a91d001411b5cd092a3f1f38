package area.guias.pfc;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;



import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Typeface;
import android.net.Uri;
import android.os.Bundle;
import android.support.v7.app.ActionBarActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.ViewConfiguration;
import android.widget.ImageView;
import android.widget.TextView;

public class ApplicationView extends ActionBarActivity{
	public IP ip = new IP();
	private static BitmapFactory.Options generalOptions;
	
	
	
	@Override
    public void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.application_view);
          
          getOverflowMenu();
          
          Bundle extras = getIntent().getExtras();
          int id = extras.getInt("id");
          String imageUrl = extras.getString("imageUri");
          String Titulo = extras.getString("titulo");
          
          TextView titulo = (TextView) findViewById(R.id.titulo_vistaaplic);          
      	  titulo.setText(Titulo);
      	  titulo.setTypeface(null, Typeface.BOLD);
      	  
      	  String Descripcion = extras.getString("description");
      	  TextView descripcion = (TextView) findViewById(R.id.descripcion_vistaaplic);
      	  if (Descripcion.equals("")==false) descripcion.setText(Descripcion+"\n");
      	  
      	  ImageView imagen = (ImageView) findViewById(R.id.imagen_vistaaplic);
      	  if (imageUrl != null){
      		  Bitmap bm = getImagePhotoUtils(Uri.parse(imageUrl));
      		  imagen.setImageBitmap(ImageHelper.getRoundedCornerBitmap(bm, 12, this));   
      	  } else {
      		  Bitmap bm = BitmapFactory.decodeResource(getResources(), R.drawable.imagen);
   		 	  imagen.setImageBitmap(ImageHelper.getRoundedCornerBitmap(bm, 12, this));
      	  }	 	  
    }
	
	
	
	
	
	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }  
	
	
	
	
	
	@Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.    	
        int id = item.getItemId();
        if (id == R.id.menu_language) {
            return true;
        }
        if (id == R.id.menu_revert){
        	//Toast.makeText(this, "revert pulsado", Toast.LENGTH_SHORT).show();
        	finish();
        	return true;
        }
        return super.onOptionsItemSelected(item);
    }
		
	
	
	
	
	public Bitmap getImagePhotoUtils(Uri uri) {
        //Bitmap result = null;
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        InputStream is = null;
        try {
            is = this.getContentResolver().openInputStream(uri);
            BitmapFactory.decodeStream(is, null, options);
            is.close();     
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        generalOptions = options;
        return scaleImage(options, uri, 300);
    }
	
	
	
	
	
	public void getOverflowMenu() {

        try {
           ViewConfiguration config = ViewConfiguration.get(this);
           Field menuKeyField = ViewConfiguration.class.getDeclaredField("sHasPermanentMenuKey");
           if(menuKeyField != null) {
               menuKeyField.setAccessible(true);
               menuKeyField.setBoolean(config, false);
           }
       } catch (Exception e) {
           e.printStackTrace();
       }
     }
	
	

	
	public static int nearest2pow(int value) {
        return value == 0 ? 0 : (32 - Integer.numberOfLeadingZeros(value - 1)) / 2;
    }
	
	
	
	
	
	public Bitmap scaleImage(BitmapFactory.Options options, Uri uri,int targetWidth) {
        if (options == null) options = generalOptions;
        Bitmap bitmap = null;
        double ratioWidth = ((float) targetWidth) / (float) options.outWidth;
        double ratioHeight = ((float) targetWidth) / (float) options.outHeight;
        double ratio = Math.min(ratioWidth, ratioHeight);
        int dstWidth = (int) Math.round(ratio * options.outWidth);
        int dstHeight = (int) Math.round(ratio * options.outHeight);
        ratio = Math.floor(1.0 / ratio);
        int sample = nearest2pow((int) ratio);
 
        options.inJustDecodeBounds = false;
        if (sample <= 0) {
            sample = 1;
        }
        options.inSampleSize = (int) sample;
        options.inPurgeable = true;
        try {
            InputStream is;
            is = getContentResolver().openInputStream(uri);
            bitmap = BitmapFactory.decodeStream(is, null, options);
            Bitmap bitmap2 = Bitmap.createScaledBitmap(bitmap, dstWidth,
                    dstHeight, true);
            bitmap = bitmap2;
            is.close();
        } catch (OutOfMemoryError e) {
            e.printStackTrace();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
 
        return bitmap;
    }
	
	
	
	
	

	
}
