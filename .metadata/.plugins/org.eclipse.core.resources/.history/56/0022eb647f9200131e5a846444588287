package area.guias.pfc;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import com.google.gson.stream.JsonReader;

import android.app.TabActivity;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.view.View;
import android.widget.ImageView;
import android.widget.TabHost;
import android.widget.TextView;

public class VistaGuia extends TabActivity {
    /** Called when the activity is first created. */
	public static AlmacenDispositivos almacen = new DispositivosArray();
	String Titulo, Descripcion;
	private int ts_id;
	private static SharedPreferences preferences;

    @Override
    public void onCreate(Bundle savedInstanceState) {
          super.onCreate(savedInstanceState);
          setContentView(R.layout.vistaguia);
          TabHost tabHost = getTabHost();
          preferences = getSharedPreferences("datos",MODE_PRIVATE);

          tabHost.addTab(tabHost.newTabSpec("tab1").setIndicator(
                "Guía", null).setContent(R.id.tab1Layout));

          tabHost.addTab(tabHost.newTabSpec("tab2").setIndicator(
                "C.T", null).setContent(R.id.tab2Layout));

          tabHost.addTab(tabHost.newTabSpec("tab3").setIndicator(
                "C.E", null).setContent(R.id.tab3Layout));
          
          tabHost.addTab(tabHost.newTabSpec("tab4").setIndicator(
                  "S.A", null).setContent(R.id.tab4Layout));
          
          Bundle extras = getIntent().getExtras();
          int id = extras.getInt("id");
          Titulo = extras.getString("titulo");
          String imageName = extras.getString("imageName");
          Descripcion = extras.getString("description");
          ts_id = extras.getInt("ts_id");
          int cs_id = extras.getInt("cs_id");
          int as_id = extras.getInt("as_id");
          ObtenerImagenTab1 hilo = new ObtenerImagenTab1(id, imageName);
  	      hilo.start();
  	      System.out.println("technological setting id ="+ ts_id);
  	      ObtenerTab2 hilo2 = new ObtenerTab2(ts_id);
  	      hilo2.start();
    }
    
    public void cargarVistas(final Bitmap bitmapImage){
		runOnUiThread(new Runnable() {
	        public void run() {
	        	ImageView imagen = (ImageView) findViewById(R.id.imagen_tab1);
	        	imagen.setImageBitmap(bitmapImage);
	        	TextView titulo = (TextView) findViewById(R.id.titulo_tab1);
	        	titulo.setText(Titulo);
	        	TextView descripcion = (TextView) findViewById(R.id.descripcion_tab1);
	        	descripcion.setText(Descripcion);
	        }
	    });
	}
    
    public void cargarVistas2(final String TituloTS, final String DescripcionTS){
		runOnUiThread(new Runnable() {
	        public void run() {
	        	//ImageView imagen = (ImageView) findViewById(R.id.imagen_tab2);
	        	//imagen.setImageBitmap(bitmapImage);
	        	TextView titulo = (TextView) findViewById(R.id.titulo_tab2);
	        	titulo.setText(TituloTS);
	        	TextView descripcion = (TextView) findViewById(R.id.descripcion_tab2);
	        	descripcion.setText(DescripcionTS);
	        }
	    });
	}
    
    
    class ObtenerImagenTab1 extends Thread {
    	int id;
    	String imageName;
        
        
    	
        public ObtenerImagenTab1(int id, String imageName) {
        	this.id = id;
        	this.imageName = imageName;
        }



        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpGet solicitud;
        	HttpResponse respuesta;
        	String BaseUrlPage, Id;
        		if (this.id/10 == 0) Id="00"+this.id;        		
        		else if (this.id/10 <= 9) Id="0"+this.id;
        		else Id=""+this.id;
        		BaseUrlPage = "http://193.146.210.92:3000/system/guides/element_images/000/000/"+Id+"/medium/"+this.imageName;
        		solicitud = new HttpGet(BaseUrlPage);	
        		solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
            	try {
					respuesta = cliente.execute(solicitud);
					HttpEntity entity = respuesta.getEntity();
					Bitmap loadedImage = BitmapFactory.decodeStream(entity.getContent());
					cargarVistas(loadedImage);
				} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}				
         }        
    }
    
    
    
    class ObtenerTab2 extends Thread {
    	int ts_id;
        
        
    	
        public ObtenerTab2(int ts_id) {
        	this.ts_id = ts_id;
        }



        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	HttpGet solicitud;
        	HttpResponse respuesta;
        	String BaseUrlPage;
        	BaseUrlPage = "http://193.146.210.92:3000/gl/technicalSettings/getWholeView.json?id="+this.ts_id;
        		solicitud = new HttpGet(BaseUrlPage);	
        		solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
            	try {
					respuesta = cliente.execute(solicitud);
					HttpEntity entity = respuesta.getEntity();
					List<TSetting> tsettingList = readJsonTSStream(entity);
					cargarVistas2(tsettingList.get(0).name, tsettingList.get(0).description);
					System.out.println("FIN");
					//String json = EntityUtils.toString(respuesta.getEntity());
					//System.out.println(json);
            	} catch (ClientProtocolException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}				
         }        
    }
    
    public List<TSetting> readJsonTSStream(HttpEntity in) throws IOException {
		JsonReader reader = new JsonReader(new InputStreamReader(in.getContent(), "UTF-8"));
		try {
			return readTSArray(reader);
		} 
		finally {
			reader.close();
		}
	}
    
    public List<TSetting> readTSArray(JsonReader reader) throws IOException {
		List<TSetting> tsettings = new ArrayList<TSetting>();
		reader.beginArray();
		while (reader.hasNext()) {
			tsettings.add(readTSetting(reader));
		}
		reader.endArray();
		return tsettings;
	}

	public TSetting readTSetting(JsonReader reader) throws IOException {
		TSetting tsetting = new TSetting();
		reader.beginObject();
		while (reader.hasNext()) {
			String name = reader.nextName();
			if (name.equals("id")) {
				tsetting.id = reader.nextInt();
				System.out.println("tsetting id=" +tsetting.id);
			} 
			else if (name.equals("name")){
				tsetting.name = reader.nextString();
				System.out.println("tsetting titulo="+tsetting.name);
			} else if (name.equals("element_image_file_name")){
				tsetting.element_image_file_name = reader.nextString();
			} else if (name.equals("description")){
				tsetting.description = reader.nextString();
				System.out.println("tsetting descripcion ="+tsetting.description);
			} else if (name.equals("devices_id")){
				reader.beginArray();	
				int i=0;
				while (reader.hasNext()){
					reader.beginObject();
					String name2 = reader.nextName();					
					if (name2.equals("id")){
						tsetting.devices_id.add(reader.nextInt());
						System.out.println("devices_id[" + i + "]="+tsetting.devices_id.get(i));
						i++;
					}
					reader.endObject();
				}				
				reader.endArray();
			} else if (name.equals("applications_id")){
				reader.beginArray();
				int i=0;
				while (reader.hasNext()){
					reader.beginObject();
					String name3 = reader.nextName();
					if (name3.equals("id")){
						tsetting.applications_id.add(reader.nextInt());
						System.out.println("applications_id[" + i + "]="+tsetting.applications_id.get(i));
						i++;
					}
					reader.endObject();
				}
				reader.endArray();
			} else {
				reader.skipValue();
			}
		}
		reader.endObject();
		return tsetting;
	}
	
	public void ver_dispositivos(View view){
		Intent intent = new Intent(this, VerDispositivos.class);
		intent.putExtra("ts_id", ts_id);
		intent.putExtra("cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
	    startActivity(intent);
	}
	
	public void ver_aplicaciones(View view){
		Intent intent = new Intent(this, VerAplicaciones.class);
		intent.putExtra("ts_id", ts_id);
	    startActivity(intent);
	}
}
