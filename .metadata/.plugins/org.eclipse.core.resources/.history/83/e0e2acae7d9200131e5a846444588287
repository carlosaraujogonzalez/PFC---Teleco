package area.guias.pfc;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.protocol.HttpContext;

import com.google.gson.stream.JsonReader;

import android.app.Activity;
import android.app.ListActivity;
import android.os.AsyncTask;
import android.os.Bundle;
import area.guias.pfc.VerDispositivos.EnviarHiloDispositivos;

public class VerAplicaciones extends ListActivity {
	private static List<Dispositivo> DispList ;
	public static AlmacenAplicaciones almacen = new AplicacionesArray();
	private static AdaptadorListaDispositivos myAdapter;
	public static HttpContext localContext;
	
	@Override 
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.ver_dispositivos);  
        myAdapter = new AdaptadorListaDispositivos(this, VerDispositivos.almacen.listaDispositivos());
        setListAdapter(myAdapter);
        getSharedPreferences("datos",MODE_PRIVATE);
        Bundle extras = getIntent().getExtras();
        int ts_id = extras.getInt("ts_id");
        String cookie = extras.getString("cookie");
	    EnviarHiloDispositivos hilo = new EnviarHiloDispositivos();
	    hilo.execute(""+ts_id, cookie);
	   
    }
	
	public void cargarVistas(){
		runOnUiThread(new Runnable() {
	        public void run() {
	          System.out.println("cargando vistas...");
	          myAdapter.notifyDataSetChanged(); 
	        }
	    });
	}
	
	public class EnviarHiloDispositivos extends AsyncTask<String, Integer, List<Dispositivo>>{
		public EnviarHiloDispositivos(){
			
		}

		//params[0]=ts_id; params[1]=cookie
		@Override
		protected List<Dispositivo> doInBackground(String... params) {
			HttpGet solicitud = null;
			HttpResponse respuesta = null;
			HttpEntity entity = null;
			HttpClient cliente = new DefaultHttpClient();
	        try {
	        	String BaseUrlPage = "http://193.146.210.92:3000/gl/technicalSettings/getWholeView.json?id="+params[0];
	            solicitud = new HttpGet(BaseUrlPage);
	            solicitud.setHeader("Cookie", params[1]);
	        	almacen.borrarLista();
	        	respuesta = cliente.execute(solicitud);
	        	entity = respuesta.getEntity();	 
	        	List<TSetting> tsettingList = readJsonTSStream(entity);
	        	BaseUrlPage = "http://193.146.210.92:3000/gl/devices/getWholeView.json?id=";
	        	for (int i=0; i<tsettingList.get(0).devices_id.size(); i++){
	        		System.out.println("id="+tsettingList.get(0).devices_id.get(i));
	        		BaseUrlPage = BaseUrlPage + tsettingList.get(0).devices_id.get(i);
	        		if (i<tsettingList.get(0).devices_id.size()-1) BaseUrlPage = BaseUrlPage+",";        		
	        	}
	        	System.out.println(BaseUrlPage);
	        	solicitud = new HttpGet(BaseUrlPage);
	            solicitud.setHeader("Cookie", params[1]);
	            respuesta = cliente.execute(solicitud);
	        	entity = respuesta.getEntity();
	        	//String json = EntityUtils.toString(respuesta.getEntity());
				//System.out.println(json);
				DispList = readJsonDispStream(entity);
				for (int i=0;i<DispList.size();i++){
			    	System.out.println("DISPOSITIVO:\nTitulo: "+ DispList.get(i).name + "\nDescripcion: " + DispList.get(i).description + "\nImagen: " + DispList.get(i).element_image_file_name + "\n");
			    	almacen.guardarDispositivo(DispList.get(i));
			    	System.out.println("Dispositivo guardado\n");
			    }	
				cargarVistas();
			} catch (ClientProtocolException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}		   
	        return DispList;
		}
		
		
		
		
		
		
		public List<TSetting> readJsonTSStream(HttpEntity in) throws IOException {
			JsonReader reader = new JsonReader(new InputStreamReader(in.getContent(), "UTF-8"));
			try {
				return readTSArray(reader);
			} 
			finally {
				reader.close();
			}
		}
	    
	    public List<TSetting> readTSArray(JsonReader reader) throws IOException {
			List<TSetting> tsettings = new ArrayList<TSetting>();
			reader.beginArray();
			while (reader.hasNext()) {
				tsettings.add(readTSetting(reader));
			}
			reader.endArray();
			return tsettings;
		}

		public TSetting readTSetting(JsonReader reader) throws IOException {
			TSetting tsetting = new TSetting();
			reader.beginObject();
			while (reader.hasNext()) {
				String name = reader.nextName();
				if (name.equals("id")) {
					tsetting.id = reader.nextInt();
					System.out.println("tsetting id=" +tsetting.id);
				} 
				else if (name.equals("name")){
					tsetting.name = reader.nextString();
					System.out.println("tsetting titulo="+tsetting.name);
				} else if (name.equals("element_image_file_name")){
					tsetting.element_image_file_name = reader.nextString();
				} else if (name.equals("description")){
					tsetting.description = reader.nextString();
					System.out.println("tsetting descripcion ="+tsetting.description);
				} else if (name.equals("devices_id")){
					reader.beginArray();	
					int i=0;
					while (reader.hasNext()){
						reader.beginObject();
						String name2 = reader.nextName();					
						if (name2.equals("id")){
							tsetting.devices_id.add(reader.nextInt());
							System.out.println("devices_id[" + i + "]="+tsetting.devices_id.get(i));
							i++;
						}
						reader.endObject();
					}				
					reader.endArray();
				} else if (name.equals("applications_id")){
					reader.beginArray();
					int i=0;
					while (reader.hasNext()){
						reader.beginObject();
						String name3 = reader.nextName();
						if (name3.equals("id")){
							tsetting.applications_id.add(reader.nextInt());
							System.out.println("applications_id[" + i + "]="+tsetting.applications_id.get(i));
							i++;
						}
						reader.endObject();
					}
					reader.endArray();
				} else {
					reader.skipValue();
				}
			}
			reader.endObject();
			return tsetting;
		}
		
		
		public List<Dispositivo> readJsonDispStream(HttpEntity in) throws IOException {
			JsonReader reader = new JsonReader(new InputStreamReader(in.getContent(), "UTF-8"));
			try {
				return readDispositivosArray(reader);
			} 
			finally {
				reader.close();
			}
		}
		
		
		
		public List<Dispositivo> readDispositivosArray(JsonReader reader) throws IOException {
			List<Dispositivo> dispositivos = new ArrayList<Dispositivo>();
			reader.beginArray();
			while (reader.hasNext()) {
				dispositivos.add(readDispositivo(reader));
			}
			reader.endArray();
			return dispositivos;
		}

		
		
		public Dispositivo readDispositivo(JsonReader reader) throws IOException {
			Dispositivo dispositivo = new Dispositivo();
			reader.beginObject();
			while (reader.hasNext()) {
				String name = reader.nextName();
				if (name.equals("id")) {
					dispositivo.id = reader.nextInt();
				} 
				else if (name.equals("name")){
					dispositivo.name = reader.nextString();
				} else if (name.equals("element_image_file_name")){
					dispositivo.element_image_file_name = reader.nextString();
				} else if (name.equals("description")){
					dispositivo.description = reader.nextString();
				} else if (name.equals("url")){
					dispositivo.url = reader.nextString();
				} else {
					reader.skipValue();
				}
			}
			reader.endObject();
			return dispositivo;
		}
		
		
	}

}
