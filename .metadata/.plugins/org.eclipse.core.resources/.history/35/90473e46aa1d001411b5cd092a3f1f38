package area.guias.pfc;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Vector;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.mime.MultipartEntity;
import org.apache.http.entity.mime.content.ContentBody;
import org.apache.http.entity.mime.content.StringBody;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.util.EntityUtils;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.GridView;
import android.widget.ImageButton;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ImageView;
import android.widget.TextView;

public class ApplicationsViewFragment extends Fragment{
	public AdaptadorListaAplicaciones listAppAdapter;
	public List<Application> AppList;
	public ApplicationsStore almacenApp = new ApplicationsArray();
	private static Guide guia;
	private ProgressDialog progressDialog;
	private TextView empty;
	private String appsType;

	// SCROLL VARIABLES
	private Scroll scroll;
	
	// LANGUAGE
	private Language language;
		
	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
				
		guia = getActivity().getIntent().getParcelableExtra("guia");
		
		GridView gridView = (GridView) getActivity().findViewById(R.id.gridView);
		gridView.setVisibility(View.INVISIBLE);
		TextView textView = (TextView) getActivity().findViewById(android.R.id.empty);
		textView.setVisibility(View.INVISIBLE);
			
		listAppAdapter = new AdaptadorListaAplicaciones(getActivity(), almacenApp.listaAplicaciones());
		gridView.setAdapter(listAppAdapter);  
		
		gridView.setOnItemClickListener(new OnItemClickListener() {	     
			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				Intent intent = new Intent(getActivity(), ApplicationView.class);
		    	intent.putExtra("id", AppList.get(position).id);
		    	intent.putExtra("titulo", AppList.get(position).name);
		    	intent.putExtra("imageUri", AppList.get(position).imageUri);
		    	
		    	System.out.println("putExtra description: "+AppList.get(position).description);
		    	intent.putExtra("description", AppList.get(position).description);
			    startActivity(intent);
			}
	    });
		
		language = getActivity().getIntent().getParcelableExtra("Language");
		
		scroll = new Scroll();
        configureListViewScroll(); 
        
		onReload("User");
	}
	
	
	
	
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
			super.onCreateView(inflater, container, savedInstanceState);
			return inflater.inflate(R.layout.applications_view_fragment, container);	
	}
	
	
	
	
	
	/*@Override 
    public void onListItemClick(ListView listView, View view, int position, long id) {
    	super.onListItemClick(listView, view, position, id);
    	Intent intent = new Intent(getActivity(), ApplicationView.class);
    	intent.putExtra("id", AppList.get(position).id);
    	intent.putExtra("titulo", AppList.get(position).name);
    	intent.putExtra("URLimage", AppList.get(position).UrlImage);
    	intent.putExtra("description", AppList.get(position).description);
	    startActivity(intent);
    }*/
	

	
	
	
	private void configureListViewScroll(){
		
		GridView gridView = (GridView) getActivity().findViewById(R.id.gridView);
        gridView.setOnScrollListener(new AbsListView.OnScrollListener() {
			
			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				
			}
			
			@Override
			public void onScroll(AbsListView view, int firstVisibleItem,int visibleItemCount, int totalItemCount) {
				boolean loadMore = firstVisibleItem + 1 + visibleItemCount >= scroll.getTotalCount();
			    if(loadMore){
			    	scroll.setTotalCount(scroll.getPageElements());
			        scroll.setPage(scroll.getPageElements()+1);
			        System.out.println("LOAD MORE("+scroll.getPage()+")");
			        new GetApplications(appsType).start();		            
			     }
			}
		});
	}
	
	
	
	
	
	
	    
	
	
	
	
	public List<TechnicalSetting> getWholeViewTechnicalSettings(int ts_id) throws ClientProtocolException, IOException{
		HttpClient cliente = new DefaultHttpClient();
    	String BaseUrlPage = new IP().ip+"/"+language.getStringLanguage()+"/technicalSettings/getWholeView.json?id="+ts_id;
    	System.out.println("URL TSETTING WHOLE VIEW:" + BaseUrlPage);
    	HttpGet	solicitud = new HttpGet(BaseUrlPage);	
    	SharedPreferences preferences = getActivity().getSharedPreferences("datos", Context.MODE_PRIVATE);
    	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
    	
		HttpResponse respuesta = cliente.execute(solicitud);
		HttpEntity entity = respuesta.getEntity();				
		List<TechnicalSetting> tsettingList = new Funciones().readJsonTSStream(entity);	
		
		return tsettingList; 
	}
	
	
	
	
	
	public List<Integer> getApplications() throws ClientProtocolException, IOException{
		HttpClient cliente = new DefaultHttpClient();
	    String BaseUrlPage = new IP().ip+"/"+language.getStringLanguage()+"/applications.json?applications_number=" + scroll.getPageElements()+"&page=" + scroll.getPage();
	    HttpGet solicitud = new HttpGet(BaseUrlPage);	
	    SharedPreferences preferences = getActivity().getSharedPreferences("datos", Context.MODE_PRIVATE);
	    solicitud.setHeader("Cookie", "_AREA_v0.1_session="+ preferences.getString("Cookie", "0"));		    
		HttpResponse respuesta = cliente.execute(solicitud);
		HttpEntity entity = respuesta.getEntity();
		List<Integer> IdList = new Funciones().readJsonIdsStream(entity);
		return IdList;
	}
	
	
	
	
	
	public List<Application> getWholeViewApplications(List<Integer> IdList, String appsType) throws ClientProtocolException, IOException{
		String BaseUrlPage = new IP().ip+"/"+language.getStringLanguage()+"/applications/getWholeView.json?id=";
    	for (int i=0; i<IdList.size(); i++){
    		BaseUrlPage = BaseUrlPage + IdList.get(i);
    		if (i<IdList.size()-1) BaseUrlPage = BaseUrlPage+",";        		
    	}		
    	System.out.println("Url de getWholeView applications:");
    	System.out.println(BaseUrlPage);
    	HttpGet solicitud = new HttpGet(BaseUrlPage);
    	SharedPreferences preferences = getActivity().getSharedPreferences("datos", Context.MODE_PRIVATE);
    	solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
    	HttpClient cliente = new DefaultHttpClient();
        HttpResponse respuesta = cliente.execute(solicitud);
    	HttpEntity entity = respuesta.getEntity();
    	AppList = new Funciones().readJsonAppStream(entity);
    	return AppList;
	}
	
	
	
	
	
	protected void finProgressBar(){
		getActivity().runOnUiThread(new Runnable() {
	        public void run() {
	        	progressDialog.dismiss();	  
	        	actualizarListaAplicaciones();
	        	GridView gridView = (GridView) getActivity().findViewById(R.id.gridView);
				gridView.setVisibility(View.VISIBLE);
				if (AppList.size()==0) empty.setVisibility(View.VISIBLE);
	        }
	    });
	}
	
	
	
	
	
	protected void comenzarHiloImagenesAplicacion(final List<Application> lista){
		getActivity().runOnUiThread(new Runnable() {
	        public void run() {
	        	new HiloImagenesAplicacion().start(); 
	        }
	    });
	}
	
	
	
	
	
	public void onReload(String UserOrSystem){		
		almacenApp.borrarLista();
		scroll.setTotalCount(scroll.getPageElements());
        scroll.setPage(1);
		if (UserOrSystem.equals("User")){
			appsType = "User";
			progressDialog = new Funciones().createProgressDialog(getActivity(), "Cargando aplicaciones del usuario...");
			new GetApplications("User").start();
		}
		else{
			appsType = "System";
			progressDialog = new Funciones().createProgressDialog(getActivity(), "Cargando aplicaciones del sistema...");
			new GetApplications("System").start();
		}
	}
	
	
	
	
	
	public void addAplicaciones(){
		int numAppAdded = 0; 
		int numApp2Add = 0;
		
		for (int i=0; i<AppList.size();i++){
			if ((AppList.get(i).checked == true)&&(AppList.get(i).checkedString.equals("Añadir")))
				numApp2Add++;
			if ((AppList.get(i).checkedString.equals("Añadido")))
				numAppAdded++;
		}
		
		final AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity()); 
		dialog.setTitle("Advertencia");
		dialog.setCancelable(false);
		
		if (numApp2Add > 0){		
			if (numApp2Add > 1) dialog.setMessage("¿Quieres añadir estas aplicaciones?");
			else dialog.setMessage("¿Quieres añadir esta aplicación?");								
			dialog.setPositiveButton("Si", new DialogInterface.OnClickListener() {   		 
				@Override
				public void onClick(DialogInterface dialog, int which) {
					new AddInvolvements().start();
					dialog.cancel();
				}
			});  	
			dialog.setNegativeButton("No", new DialogInterface.OnClickListener() {   		 
				@Override
				public void onClick(DialogInterface dialog, int which) {
					dialog.cancel();
				}
			});  	
			dialog.show();
		}
		else{
			if (numApp2Add == 0) dialog.setMessage("¡No tienes ninguna aplicación marcada!");
			else if (numAppAdded == AppList.size()) dialog.setMessage("¡Ya tienes todas las aplicaciones!");
			dialog.setPositiveButton("OK", new DialogInterface.OnClickListener() {   		 
				@Override
				public void onClick(DialogInterface dialog, int which) {
					dialog.cancel();
				}
			});  	
			dialog.show();
		}
    	
    }
	
	
	
	
	
	public void select_language(int lang){
    	language.setLanguage(lang);
    	onReload(appsType);
    }
	
	
	
	
	
	
	
	
	
	
	
	public void actualizarListaAplicaciones(){
		getActivity().runOnUiThread(new Runnable() {
	        public void run() {	        		        	
	        	listAppAdapter.notifyDataSetChanged();
	        }
	    }); // runOnUiThread
	}
	
	
	
	
	
	 public void eliminarAplicaciones(boolean finish){
		// Mirar el numero de aplicaciones a eliminar
		int numAppChecked=0;
		numAppChecked = numSelectedApplications();
		
		final AlertDialog.Builder dialog = new AlertDialog.Builder(getActivity());
		dialog.setTitle("Advertencia");
		dialog.setCancelable(false);
		
		if (finish == false){
			if (numAppChecked == 0){
				dialog.setMessage("Tienes que marcar alguna aplicación para eliminarla.");
				dialog.setPositiveButton("Ok", new DialogInterface.OnClickListener() {   		 
				   @Override
				   public void onClick(DialogInterface dialog, int which) {
					  dialog.cancel();
				   }
				});  	
			}
			else if (numAppChecked>0){
				if (numAppChecked==1) dialog.setMessage("¿Estás seguro de que quieres eliminar esta aplicación de tu contexto técnico?");
				else dialog.setMessage("¿Estás seguro de que quieres eliminar estas aplicaciones de tu contexto técnico?");
				dialog.setPositiveButton("Si", new DialogInterface.OnClickListener() {   		 
				   @Override
				   public void onClick(DialogInterface dialog, int which) {
					   int numAppChecked=0;
					   for (int i=0;i<AppList.size();i++)
						   if (AppList.get(i).checked == true){
							   almacenApp.borrarAplicacion(AppList.get(i).id);  
							   numAppChecked++;
						   }					   
					   new RemoveApplications(numAppChecked).start();					   				   
					   dialog.cancel();
					   listAppAdapter.notifyDataSetChanged();	
				   }
				});  	
				dialog.setNegativeButton("No", new DialogInterface.OnClickListener() {   		 
		    		   @Override
		    		   public void onClick(DialogInterface dialog, int which) {
		    		      dialog.cancel();
		    		   }
		    	});  	
			}		  	
			dialog.show();
		}
		if (finish == true){
			if (numAppChecked==1) dialog.setMessage("¿Quieres eliminar esta aplicación de tu contexto técnico antes de salir?");
			else dialog.setMessage("¿Quieres eliminar estas aplicaciones de tu contexto técnico antes de salir?");
			dialog.setPositiveButton("Si", new DialogInterface.OnClickListener() {   		 
			   @Override
			   public void onClick(DialogInterface dialog, int which) {
				   int numAppChecked=0;
				   for (int i=0;i<AppList.size();i++)
					   if (AppList.get(i).checked == true){
						   almacenApp.borrarAplicacion(AppList.get(i).id);  
						   numAppChecked++;
					   }					   
				   new RemoveApplications(numAppChecked).start();					   				   
				   dialog.cancel();
				   listAppAdapter.notifyDataSetChanged();	
				   getActivity().finish();
			   }
			});  	
			dialog.setNegativeButton("No", new DialogInterface.OnClickListener() {   		 
	    		   @Override
	    		   public void onClick(DialogInterface dialog, int which) {
	    		      dialog.cancel();
	    		      getActivity().finish();
	    		   }
	    	});  	
			
			dialog.show();
		}
    }

	 
	 
	
	
	 private OnClickListener mCommentButtonClickListener = new OnClickListener() {
	        @Override
	        public void onClick(View v) {
	        	GridView gridView = (GridView) getActivity().findViewById(R.id.gridView);
	        	final int position = gridView.getPositionForView(v);
	            if (position != AdapterView.INVALID_POSITION) {
	            	//Intent intent = new Intent(getActivity(), CommentsView.class);
	            	//intent.putExtra("guia", guidesStore.getGuide(position));
	            	//startActivity(intent);
	            }
	        }
	    };

			
			
		    

	    private OnClickListener mShareButtonClickListener = new OnClickListener() {
	        @Override
	        public void onClick(View v) {
	        	GridView gridView = (GridView) getActivity().findViewById(R.id.gridView);
	        	final int position = gridView.getPositionForView(v);
	            if (position != AdapterView.INVALID_POSITION) {
	                //showMessage("Botón Compartir " + position + " Pulsado");
	            }
	        }
	    };
	    
	    
	    
	    
	    
	 public int numSelectedApplications(){
		int numAppsChecked=0;
		for (int i=0;i<AppList.size();i++){
			if (AppList.get(i).checked == true) numAppsChecked++;
		}
		return numAppsChecked;
	 }
	 
	 
	 
	
	
	public void applicationsSearch(String search, boolean owner, int page, int applications_number){
		new ApplicationsSearch(search, owner, page, applications_number).start();
	}
	
	
	
	
	
class AddInvolvements extends Thread {
		
        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	String BaseUrlPage = new IP().ip+"/"+language.getStringLanguage()+"/technicalSettings/addInvolvements.json?id="+guia.technical_setting.id+"&applications=";        	
			try {
				int num_apps_checked = 0;
				for (int i=0; i<AppList.size();i++)
					if ((AppList.get(i).checked == true)&&(AppList.get(i).checkedString.equals("Añadir"))) num_apps_checked++;
				if (num_apps_checked != 0){
					for (int i=0; i<AppList.size();i++){
						if ((AppList.get(i).checked == true)&&(AppList.get(i).checkedString.equals("Añadir"))){	
							num_apps_checked--;
							BaseUrlPage+=AppList.get(i).id;
							if (num_apps_checked > 0) BaseUrlPage += ",";
							AppList.get(i).checkedString = "Añadido";
						}
					}
					HttpPut solicitud = new HttpPut(BaseUrlPage);
					SharedPreferences preferences = getActivity().getSharedPreferences("datos", Context.MODE_PRIVATE);
					solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
					cliente.execute(solicitud);
				}				
				System.out.println("Url de añadir aplicaciones:");
				System.out.println(BaseUrlPage);
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}		
			actualizarListaAplicaciones();
        }        
    }
	
	
	
	
	
	class HiloImagenesAplicacion extends Thread {
 
        @Override 
        public void run() {
        	HttpClient cliente = new DefaultHttpClient();
        	for(int i=0;i<AppList.size();i++){
        		if (AppList.get(i).UrlImage != null){
        			if (AppList.get(i).UrlImage.equals("none")==false){      		     			
        				try {
        					String BaseUrlPage = new IP().ip+AppList.get(i).UrlImage;
        					System.out.println("Url imagen aplicación");
        					System.out.println(BaseUrlPage);
        					HttpGet solicitud = new HttpGet(BaseUrlPage);	
        					SharedPreferences preferences = getActivity().getSharedPreferences("datos", Context.MODE_PRIVATE);
        					solicitud.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
        					HttpResponse respuesta = cliente.execute(solicitud);
        					HttpEntity entity = respuesta.getEntity();
        					Bitmap loadedImage = BitmapFactory.decodeStream(entity.getContent());
        					if (loadedImage != null){
        						AppList.get(i).imageUri = new Funciones().getImageUri(getActivity(), loadedImage).toString();
            					almacenApp.setImage(AppList.get(i).id, loadedImage);
        					}			
        				} catch (ClientProtocolException e) {        			
        					e.printStackTrace();
        				} catch (IOException e) {
        					e.printStackTrace();
        				}	
        			}
        		}
        		actualizarListaAplicaciones();
        	}
        	
        }        
    }
	
	
	
	
	
	public class ApplicationsSearch extends Thread {	
        String search;
        boolean owner;
        int page, applications_number;
            
        public ApplicationsSearch(String search, boolean owner, int page, int applications_number) {
            this.search = search;
            this.owner = owner;
            this.page = page;
            this.applications_number = applications_number;
        }

        @Override 
        public void run() {   
        	IP ip = new IP();
        	Funciones funciones = new Funciones();
        	List<Integer> list;
        	MultipartEntity mpEntity = new MultipartEntity();
    		try {
    			HttpClient httpClient = new DefaultHttpClient();        	
    	       	String Url = ip.ip+"/"+language.getStringLanguage()+"/devices/search.json";
    	   		     
    	      
    			Url+="?owner="+this.owner;    			
    			if (this.search.equals("") == false){
    				ContentBody searchBody = new StringBody(this.search);				
					mpEntity.addPart("search", searchBody);
    				Url+="&search="+this.search;
    			}				
    			if (this.page != -1){
    				Url+="&page="+this.page;
    			}
    			if (this.applications_number != -1){
    				Url+="&applications_number="+this.applications_number;
    			}
    				
    			HttpGet httpGet = new HttpGet(Url);
    			System.out.println("Url search guides: "+Url);
    			getActivity();
				SharedPreferences preferences = getActivity().getSharedPreferences("datos", Context.MODE_PRIVATE); 
    	       	httpGet.setHeader("Cookie", "_AREA_v0.1_session=" + preferences.getString("Cookie", "0"));
    			
    	       	// PRUEBA
				HttpResponse httpResponse = httpClient.execute(httpGet);
				String json = EntityUtils.toString(httpResponse.getEntity());
				System.out.println("JSON SEARCH: " + json);
				// FIN DE PRUEBA
				
               	httpResponse = httpClient.execute(httpGet);	
               	HttpEntity httpEntity = httpResponse.getEntity();
               	list = funciones.readJsonIdsStream(httpEntity);
               	almacenApp.borrarLista();
               	for (int j=0;j<list.size();j++){
               		for (int k=0;k<AppList.size(); k++){
               			if (list.get(j) == AppList.get(k).id){
               				almacenApp.guardarAplicacion(AppList.get(k));
               				break;
               			}
               		}               		
               	}              	
               	actualizarListaAplicaciones();
				
    		} catch (UnsupportedEncodingException e1) {
    			e1.printStackTrace();
    		} catch (ClientProtocolException e) {
    			e.printStackTrace();
    		} catch (IOException e) {
    			e.printStackTrace();
    		}				              
        }
    }
	
	
	
	
	
	public class GetApplications extends Thread {
		String UserOrSystem;
		
		public GetApplications(String UserOrSystem){
			this.UserOrSystem = UserOrSystem;
		}

        @Override 
        public void run() {        	
            try {    
            	almacenApp.borrarLista();
            	if (UserOrSystem.equals("System")){
            		// CONSEGUIR LISTA DE DISPOSITIVOS PROPIOS DE ESTE TSETTING
            		List<TechnicalSetting> tsettingList = getWholeViewTechnicalSettings(guia.technical_setting.id);
            		// CONSEGUIR LISTA DE DISPOSITIVOS DEL SISTEMA
    				List<Integer> IdList = getApplications();
    				AppList = getWholeViewApplications(IdList, "System");
    				
    				for (int i=0; i<AppList.size(); i++){
    	        		for (int j=0; j<tsettingList.get(0).applications_id.size(); j++){
    		        		if (tsettingList.get(0).applications_id.get(j) == AppList.get(i).id){
    		        			AppList.get(i).checked = true;
    		        			AppList.get(i).checkedString = "Añadido";
    		        		}
    		        	}	 
    	        	}	
            	}
            	
            	if (UserOrSystem.equals("User")){
            		AppList = getWholeViewApplications(guia.technical_setting.applications_id, "User");
            		for (int i=0; i<AppList.size(); i++){
                		AppList.get(i).checkedString = "Eliminar";
    	        	}	
            	}
				
            	
            	
				// Guardar aplicaciones de esta guía
				for (int i=0;i<AppList.size();i++)	
					if (AppList.get(i).id != -1) almacenApp.guardarAplicacion(AppList.get(i));				
				
				// Cada aplicación tendrá una imagen
				if (AppList.size()>0) comenzarHiloImagenesAplicacion(AppList);	
				finProgressBar();
            } catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}				
         }        
    }
	
	
	
	
	
	class RemoveApplications extends Thread {

		int numAppChecked;
		public RemoveApplications(int numAppChecked){
			this.numAppChecked=numAppChecked;
		}
		
        @Override 
        public void run() {
        	       	
			try {				
				HttpClient cliente = new DefaultHttpClient(); 			
					String BaseUrlPage = new IP().ip+"/"+language.getStringLanguage()+"/technicalSettings/deleteInvolvements.json?id="+guia.technical_setting.id+"&applications=";
					for (int i=0;i<AppList.size();i++){
						if (AppList.get(i).checked==true){
							this.numAppChecked--;
							if (this.numAppChecked==0) BaseUrlPage += AppList.get(i).id;
							else BaseUrlPage += AppList.get(i).id + ",";
						}
					}
					HttpDelete solicitudBorrar = new HttpDelete(BaseUrlPage);
					SharedPreferences preferences = getActivity().getSharedPreferences("datos", Context.MODE_PRIVATE);
					solicitudBorrar.setHeader("Cookie", "_AREA_v0.1_session="+preferences.getString("Cookie", "0"));
					cliente.execute(solicitudBorrar);	
					System.out.println(BaseUrlPage);
					
					System.out.println("tamaño de la lista de aplicaciones: " + AppList.size());
					for (int i=0;i<AppList.size();i++){
						   if (AppList.get(i).checked == true){
							   AppList.remove(i);
							   i=0;
						   }				   
					}
					System.out.println("tamaño actual de la lista de aplicaciones: " + AppList.size());

								
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			} catch (ClientProtocolException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}	
			actualizarListaAplicaciones();
        }        
    }
    
    
    
    
    
	public class AdaptadorListaAplicaciones extends BaseAdapter {
		private final Activity actividad;
	    private final Vector<Application> lista;
	    
	   
	        
	    public AdaptadorListaAplicaciones(Activity actividad, Vector<Application> aplicaciones) {
	        super();
	        this.actividad = actividad;
	        this.lista = aplicaciones;
	    }
	    
	    
	    
		@Override
		public int getCount() {
			return lista.size();
		}

		
		

		@Override
		public Object getItem(int position) {
			return lista.elementAt(position);
		}

		
		
		@Override
		public long getItemId(int position) {
			return position;
		}

		
		
		@Override
		public View getView(final int position, View convertView, ViewGroup parent) {
			ItemHolder myHolder = new ItemHolder();
	        ItemHolderView view = (ItemHolderView) convertView;
			
	        if (view == null){
	        	 view = new ItemHolderView(getActivity());
      	 
	        	 myHolder.title = (TextView) view.findViewById(R.id.title);
	        	 myHolder.description = (TextView) view.findViewById(R.id.description);
	        	 myHolder.keywords = (TextView) view.findViewById(R.id.keywords);
	        	 myHolder.image = (ImageView) view.findViewById(R.id.image);
	        	 myHolder.comment = (ImageButton) view.findViewById(R.id.comment);
	        	 myHolder.comment.setOnClickListener(mCommentButtonClickListener);
	        	 myHolder.share = (ImageButton) view.findViewById(R.id.share);
	        	 myHolder.share.setOnClickListener(mShareButtonClickListener);
	        	 myHolder.checkbox = (CheckBox) view.findViewById(R.id.checkbox);	
	        	 myHolder.horizontalLine = (View) view.findViewById(R.id.horizontalLine);
	        	 
	        	 view.setTag(myHolder);
	        	 view.createViews();
	         }
	         else myHolder = (ItemHolder) view.getTag();
			
			myHolder.checkbox.setOnCheckedChangeListener(new OnCheckedChangeListener() {				
				@Override
				public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
					if (appsType.equals("User")){
						if (isChecked) lista.get(position).checked = true;
						else lista.get(position).checked = false;
					}
					else {
						if (isChecked) lista.get(position).checked = true;
						else if (!lista.get(position).checkedString.equals("Añadido")) lista.get(position).checked = false;	
					}
				}
			 });
			
			 if (appsType.equals("User")){
				 if (lista.get(position).checked == true) view.setChecked(true);
				 else view.setChecked(false);
				 
				 view.setCheckboxText("Eliminar");
			 }
			 else{
				 if (lista.get(position).checked == true) view.setChecked(true);
				 else view.setChecked(false);
				 
		         if (lista.get(position).checkedString.equals("Añadido")) view.setCheckboxText("Añadido");
		         else if (lista.get(position).checkedString.equals("Añadir")) view.setCheckboxText("Añadir");
			 }
		         
	         if (lista.get(position).name != "") view.setTitle(lista.get(position).name);
	         else view.setTitle("");      
	         
	         if (lista.get(position).description != "") view.setDescription(lista.get(position).getShortDescription());
	         else view.setDescription("");
	         
	         if (lista.get(position).image != null){
	        	 view.setImage(ImageHelper.getRoundedCornerBitmap(lista.get(position).image, 12, this.actividad));
	         }
	         else{ // Imagen por defecto (NO IMAGE)
	        	 Bitmap bm = BitmapFactory.decodeResource(this.actividad.getResources(), R.drawable.imagen);
	        	 view.setImage(ImageHelper.getRoundedCornerBitmap(bm, 12, this.actividad));
	         }
	         return view;
		}
			
	}
    
}